{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020/01/04/updating-column-type","webpackCompilationHash":"642efac6ed852a3b544d","result":{"data":{"markdownRemark":{"html":"<p>So, you have a table and you need to modify a column's type. The problem arise when the column is filled and the type change is incompatible, for example, from string to integer, so <strong>how we can update the type and recompute the filled values to the new type?</strong></p>\n<p>Don't worry, SQL is powerful enough to let you make the change in one sentence with <code class=\"language-text\">ALTER TABLE</code>.</p>\n<!--more-->\n<p>In the next example, we are supposing:</p>\n<ul>\n<li>we have a table <code class=\"language-text\">the_table</code> </li>\n<li>has a string column <code class=\"language-text\">status</code> with values: <code class=\"language-text\">(happy | sad)</code></li>\n<li>we want to change the column's type from string to integer and set values as <code class=\"language-text\">happy=1 | sad=2</code></li>\n</ul>\n<blockquote>\n<p>Yes, I know using strings for status instead creating a table with the allowed statuses is a bad decision, but is needed for this example ðŸ˜„</p>\n</blockquote>\n<p>Easy, just run:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> the_table\n  <span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">COLUMN</span> <span class=\"token keyword\">status</span> <span class=\"token keyword\">TYPE</span> <span class=\"token keyword\">INT</span>\n    <span class=\"token keyword\">USING</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">CASE</span> <span class=\"token keyword\">WHEN</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">=</span> <span class=\"token string\">'happy'</span> <span class=\"token keyword\">THEN</span> <span class=\"token number\">1</span> <span class=\"token keyword\">ELSE</span> <span class=\"token number\">3</span> <span class=\"token keyword\">END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>A note. If the column <code class=\"language-text\">status</code> has a default value, for example <code class=\"language-text\">happy</code> you first need to remove that default constraint, update the type and then set the new default value:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">BEGIN</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> the_table <span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">COLUMN</span> <span class=\"token keyword\">status</span> <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">DEFAULT</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> the_table\n  <span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">COLUMN</span> <span class=\"token keyword\">status</span> <span class=\"token keyword\">TYPE</span> <span class=\"token keyword\">INT</span>\n    <span class=\"token keyword\">USING</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">CASE</span> <span class=\"token keyword\">WHEN</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">=</span> <span class=\"token string\">'happy'</span> <span class=\"token keyword\">THEN</span> <span class=\"token number\">1</span> <span class=\"token keyword\">ELSE</span> <span class=\"token number\">3</span> <span class=\"token keyword\">END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> the_table <span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">COLUMN</span> <span class=\"token keyword\">status</span> <span class=\"token keyword\">SET</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this case, because we are executing three sentences, we are running within a transaction to avoid undesired problems if one of the sentences fails.</p>","excerpt":"So, you have a table and you need to modify a column's type. The problem arise when the column is filled and the type change is incompatible, for example, from string to integer, so how we can update the type and recompute the filled values to the new type? Don't worry, SQL is powerful enough to let you make the change in one sentence with .","frontmatter":{"date":"04 January, 2020","title":"How to update a column's type (in PostgreSQL)"},"fields":{"slug":"/blog/2020/01/04/updating-column-type","readingTime":{"text":"2 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2020/01/04/updating-column-type"}}}