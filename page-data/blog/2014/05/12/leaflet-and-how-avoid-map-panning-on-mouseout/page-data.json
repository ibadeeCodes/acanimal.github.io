{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2014/05/12/leaflet-and-how-avoid-map-panning-on-mouseout","webpackCompilationHash":"1a07f4d853d389c5c378","result":{"data":{"markdownRemark":{"html":"<p>A couple of days ago\n, a friend asked this simple question in a Spanish forum. The scenario is simple, you have a map and when dragging it you would like to stop the action when the mouse goes beyond the limits of the map, really beyond the <code class=\"language-text\">div</code> (or any other DOM element that) contains the map.</p>\n<p>The first try anyone can try could be something like:</p>\n<p>{% highlight javascript %}\n// create a map in the \"map\" div, set the view to a given place and zoom\nvar map = L.map('map').setView([51.505, -0.09], 13);</p>\n<p>// add an OpenStreetMap tile layer\nL.tileLayer('<a href=\"http://%7Bs%7D.tile.osm.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&#x27;\">http://{s}.tile.osm.org/{z}/{x}/{y}.png'</a>, {\nattribution: '© <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n}).addTo(map);</p>\n<p>// Register event to enable/disable dragging on mouse out.\nmap.on('mouseout', function() {\nmap.dragging.disable();\n});\nmap.on('mouseover', function() {\nmap.dragging.enable();\n});\n{% endhighlight %}</p>\n<p>but that has no effect. (<a href=\"http://jsfiddle.net/2yvtV/1/\">See here</a>)</p>\n<p>Now, remove the <code class=\"language-text\">mouseover</code> listener and try again:</p>\n<p>{% highlight javascript %}\n// create a map and add the layer\nvar map = ...</p>\n<p>// Register event to enable/disable dragging on mouse out.\nmap.on('mouseout', function() {\nmap.dragging.disable();\n});\n{% endhighlight %}</p>\n<p>surprisingly, when the mouse goes out the map the dragging action continues active and once you finish dragging the <code class=\"language-text\">disable()</code> method seems to take place and you can't drag the map again. (<a href=\"http://jsfiddle.net/2yvtV/2/\">See here</a>).</p>\n<p>After some time looking at Leaflet source code (we aware I have done it for Leaflet 0.7.2) I found a possible solution but, first, let me do some explanation.</p>\n<p>The <code class=\"language-text\">L.Map</code> class has attached <em>hooks</em>, like drag, or zoom actions, which provides the map with some behavior.</p>\n<p>The <code class=\"language-text\">L.Map.Drag</code> class is responsible to control the dragging action. It has <code class=\"language-text\">enable</code>/<code class=\"language-text\">disable</code> methods and, more important, it uses internally a <code class=\"language-text\">L.Draggable</code> instance, which is responsible to detect and catch mouse events on the map. This way:</p>\n<ul>\n<li>the <code class=\"language-text\">L.Draggable</code> catches mouse events on  the map panel (also for mouse move),</li>\n<li>makes some process and triggers some new events that are catch by the <code class=\"language-text\">L.Map.Drag</code> instance</li>\n<li>the <code class=\"language-text\">L.Map.Drag</code> instance makes some process and triggers the know map events <code class=\"language-text\">move</code> and <code class=\"language-text\">drag</code>.</li>\n</ul>\n<p>In addition, invoking <code class=\"language-text\">L.Map.Drag.disable()</code> implies a call to <code class=\"language-text\">L.Draggable.disable()</code> too but (I don't understand yet why), it seems not takes effect until you release the mouse button. The <code class=\"language-text\">L.Draggable</code> instance continues catching mouse event and <em>informing</em> <code class=\"language-text\">L.Map.Drag.</code></p>\n<p>All this say, a possible solution to stop the dragging action when the mouse goes out the map panel is to <em>freeze</em> the work of <code class=\"language-text\">L.Draggable.</code></p>\n<blockquote>\n<p>Please, note the next code violates almost all the [SOLID](<a href=\"http://en.wikipedia.org/wiki/SOLID_(object-oriented_design\">http://en.wikipedia.org/wiki/SOLID_(object-oriented_design</a>) principles, so don't fire me.</p>\n</blockquote>\n<p>{% highlight javascript %}\nL.Draggable.prototype.<em>freeze=false;\nL.Draggable.prototype.</em>updatePosition= function () {\nif(this._freeze) {\nreturn;\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">this.fire(&#39;predrag&#39;);\nL.DomUtil.setPosition(this._element, this._newPos);\nthis.fire(&#39;drag&#39;);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>};\n{% endhighlight %}</p>\n<p>The code adds a new <code class=\"language-text\">_freeze</code> property to the <code class=\"language-text\">L.Draggable</code> class and redefines the <code class=\"language-text\">_updatePosition</code> method to check the property.</p>\n<p>Now, you can freeze the mouse dragging action as:</p>\n<p>{% highlight javascript %}\nmap.on('mouseout', function() {\nmap.dragging.<em>draggable.</em>freeze=true;\n});\nmap.on('mouseover', function() {\nmap.dragging.<em>draggable.</em>freeze=false;\n});\n{% endhighlight %}</p>\n<p>You can see it in action <a href=\"http://jsfiddle.net/v7P8P/1/\">here</a>.</p>","excerpt":"A couple of days ago\n, a friend asked this simple question in a Spanish forum. The scenario is simple, you have a map and when dragging it you would like to stop the action when the mouse goes beyond the limits of the map, really beyond the  (or any other DOM element that) contains the map. The first try anyone can try could be something like: {% highlight javascript %}\n// create a map in the \"map\" div, set the view to a given place and zoom\nvar map = L.map('map').setView(51.505, -0.09, 13); // add an OpenStreetMap tile layer\nL.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {\n    attribution: '© OpenStreetMap contributors'\n}).addTo(map); // Register event to enable/disable dragging on mouse out.\nmap.on('mouseout', function() {\n    map.dragging.disable();\n});\nmap.on('mouseover', function() {\n    map.dragging.enable();\n});\n{% endhighlight %} but that has no effect. (See here) Now, remove the  listener and try again: {% highlight javascript %}\n// create a map and add the layer\nvar map = ... // Register event to enable/disable dragging on mouse out.\nmap.on('mouseout', function() {\n    map.dragging.disable();\n});\n{% endhighlight %} surprisingly, when the mouse goes out the map the dragging action continues active and once you finish dragging the  method seems to take place and you can't drag the map again. (See here). After some time looking at Leaflet source code (we aware I have done it for Leaflet 0.7.2) I found a possible solution but, first, let me do some explanation. The  class has attached hooks, like drag, or zoom actions, which provides the map with some behavior. The  class is responsible to control the dragging action. It has / methods and, more important, it uses internally a  instance, which is responsible to detect and catch mouse events on the map. This way: the  catches mouse events on  the map panel (also for mouse move), makes some process and triggers some new events that are catch by the  instance the  instance makes some process and triggers the know map events  and . In addition, invoking  implies a call to  too but (I don't understand yet why), it seems not takes effect until you release the mouse button. The  instance continues catching mouse event and informing  All this say, a possible solution to stop the dragging action when the mouse goes out the map panel is to freeze the work of  Please, note the next code violates almost all the SOLID(http://en.wikipedia.org/wiki/SOLID_(object-oriented_design) principles, so don't fire me. {% highlight javascript %}\nL.Draggable.prototype.freeze=false;\nL.Draggable.prototype.updatePosition= function () {\n    if(this._freeze) {\n        return;\n    } };\n{% endhighlight %} The code adds a new  property to the  class and redefines the  method to check the property. Now, you can freeze the mouse dragging action as: {% highlight javascript %}\nmap.on('mouseout', function() {\n    map.dragging.draggable.freeze=true;\n});\nmap.on('mouseover', function() {\n    map.dragging.draggable.freeze=false;\n});\n{% endhighlight %} You can see it in action here.","frontmatter":{"date":"12 May, 2014","title":"Leaflet and how avoid map panning on mouseout"},"fields":{"slug":"/blog/2014/05/12/leaflet-and-how-avoid-map-panning-on-mouseout","readingTime":{"text":"3 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2014/05/12/leaflet-and-how-avoid-map-panning-on-mouseout"}}}