{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018/03/15/express-async-middleware","webpackCompilationHash":"1a07f4d853d389c5c378","result":{"data":{"markdownRemark":{"html":"<p>If you are not living in a cave for the past year you'll probably know the <code class=\"language-text\">async/await</code> keywords are one of the most interesting additions on ES7. It merges the benefits of a sequential syntax with the power of asynchronous programming.</p>\n<p>In this post we will cover how we must use correctly async functions as express middleware.</p>\n<!--more-->\n<h2>async/await</h2>\n<p><code class=\"language-text\">async/await</code> is an extremely useful notation. There are plenty of good articles explaining them and how to use it and, IMO, there is an extremely useful visual explanation in 7 secs: <a href=\"https://async-await.xyz/\">Async/Await in JavaScript, 7 seconds</a>.</p>\n<p>Simply compare the syntax evolution from callbacks, passig through the use of promises until asyn/await (extracted from <a href=\"https://www.toptal.com/javascript/asynchronous-javascript-async-await-tutorial\">Asynchronous JavaScript: From Callback Hell to Async and Await</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Verifying a user using callbacks</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">verifyUser</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   dataBase<span class=\"token punctuation\">.</span><span class=\"token function\">verifyUser</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> userInfo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n           dataBase<span class=\"token punctuation\">.</span><span class=\"token function\">getRoles</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> roles</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                   <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                   dataBase<span class=\"token punctuation\">.</span><span class=\"token function\">logAccess</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                           <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                           <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> userInfo<span class=\"token punctuation\">,</span> roles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token punctuation\">}</span>\n                   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Verifying a user with promises</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">verifyUser</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   database<span class=\"token punctuation\">.</span><span class=\"token function\">verifyUser</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">userInfo</span> <span class=\"token operator\">=></span> dataBase<span class=\"token punctuation\">.</span><span class=\"token function\">getRoles</span><span class=\"token punctuation\">(</span>userInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rolesInfo</span> <span class=\"token operator\">=></span> dataBase<span class=\"token punctuation\">.</span><span class=\"token function\">logAccess</span><span class=\"token punctuation\">(</span>rolesInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">finalResult</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n           <span class=\"token comment\">//do whatever the 'callback' would do</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n           <span class=\"token comment\">//do whatever the error handler needs</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Here you must implement `database.verifyUser`, `database.getRoles`</span>\n<span class=\"token comment\">// and `database.logAccess` as promises, i.e:</span>\n<span class=\"token keyword\">const</span> getRoles <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">function</span> <span class=\"token punctuation\">(</span>userInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       database<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">connection</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get roles sql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>reject<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Verifying a user with async/await</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">verifyUser</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">const</span> userInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> dataBase<span class=\"token punctuation\">.</span><span class=\"token function\">verifyUser</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">const</span> rolesInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> dataBase<span class=\"token punctuation\">.</span><span class=\"token function\">getRoles</span><span class=\"token punctuation\">(</span>userInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">const</span> logStatus <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> dataBase<span class=\"token punctuation\">.</span><span class=\"token function\">logAccess</span><span class=\"token punctuation\">(</span>userInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> userInfo<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">//handle errors as needed</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Here we use the same `database.verifyUser`, `database.getRoles`</span>\n<span class=\"token comment\">// and `database.logAccess` implementation based on promises</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As you can see the async/await notation is more clear, in the sense it visually looks like a sequential set ot imperative sentences, but with the powerful of JS asynchronous programing.</p>\n<h3>Notes on async/await</h3>\n<p>When you use async/await you are responsible to handle errores at the point you desire. In the previous example we could also write:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Verifying a user with async/await</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">verifyUser</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> userInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> dataBase<span class=\"token punctuation\">.</span><span class=\"token function\">verifyUser</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> rolesInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> dataBase<span class=\"token punctuation\">.</span><span class=\"token function\">getRoles</span><span class=\"token punctuation\">(</span>userInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> logStatus <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> dataBase<span class=\"token punctuation\">.</span><span class=\"token function\">logAccess</span><span class=\"token punctuation\">(</span>userInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> userInfo<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The issue is if <code class=\"language-text\">verifyUser</code> fails at some point the funcion will trown an exception that should be catch by caller function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> userInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">verifyUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Do something with the info</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do whatever</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>Note: There is nothing new, the same way we need to use <code class=\"language-text\">.catch()</code> for promises.</p>\n</blockquote>\n<h2>Middlewares</h2>\n<p>Express is one of the most famous and used NodeJS frameworks. Among other things it adds the concept of middleware. Given a HTTP request (also the response) we can imagine a pipeline to traverse, where on each step a task is made: check request is authenticated, parse body and \"inject\" as an extra param in the request, check params are right, do some bussiness logic, etc.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/0*8HIzvtX-DA3C26uv.png\" alt=\"Express middlewares\"></p>\n<p>In express, a middleware is nothing more than a callback function that receives three params: <code class=\"language-text\">function middleware (request, response, next) {}</code></p>\n<ul>\n<li><code class=\"language-text\">request</code>: Reference to the object representing the HTTP request. We use it to get any data associated to the request: body, url, headers, etc.</li>\n<li><code class=\"language-text\">response</code>: Reference to the object repreenting the HTTP response. We need it to write a response: response code, body, headers, etc.</li>\n<li><code class=\"language-text\">next</code>: Callback we need to execute if we want to continue the pipeline of middlewares.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> require <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is a not async/await middleware'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>How to use async/await functions as middlewares</h2>\n<p>Simply remember to handle async/await errors. So <strong>never to this</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// NEVER DO THIS !!!</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Some code here</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Because if for some reason the code inside the async funcion fails it will throw the error to the caller function (which is expressjs) and it will never be handled.</p>\n<p>The right way would be as:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// DO THIS !!!</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Inside the middleware we make some actions and if things goes fine we invoke the net middleware or catch the error and invoke the next middleware with the error, this way expressjs will detect and handle the error.</p>\n<h3>Applying some DRY</h3>\n<p>One thing we can do to avoid repeating the try/catch code on each async middleware is write once in a high order function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">asyncHandler</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  Promise\n    <span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The <code class=\"language-text\">asyncHandler</code> receives a function and returns a function with three input params (oh wait!!! that's like a middleware function). This new function is responsible to executes the original function passing the three params and catching any error.</p>\n<p>Now we can rewrite our asynchronous middlewares like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">asyncHandler</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Some code here. Any error will be catch and pass to expressjs</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Conclusions</h2>\n<p>My advice is: embrace <code class=\"language-text\">async/await</code>. It is very powerful notation one step beyong promises. Simply remember do not believe in magic and handle errors (the same way like with promises and callbacks) and remember to apply this too when working with expressjs.</p>","excerpt":"If you are not living in a cave for the past year you'll probably know the  keywords are one of the most interesting additions on ES7. It merges the benefits of a sequential syntax with the power of asynchronous programming. In this post we will cover how we must use correctly async functions as express middleware.","frontmatter":{"date":"15 February, 2018","title":"Using async/await in ExpressJS middlewares"},"fields":{"slug":"/blog/2018/03/15/express-async-middleware","readingTime":{"text":"5 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2018/03/15/express-async-middleware"}}}