{"componentChunkName":"component---src-templates-blog-post-js","path":"/2011/10/08/sending-emails-with-java/","webpackCompilationHash":"1ee04d26e703fb0db201","result":{"data":{"markdownRemark":{"html":"<p>I start writing this post as a simple \"how to send an email\" using Java, but later I found I need to briefly explain more things. So, here is this kind of <em>all in one summary about sending emails with Java</em>.</p>\n<p>Outside the Java SE platform, but included in JavaEE one, the <a href=\"http://www.oracle.com/technetwork/java/javamail/index.html\">JavaMail</a> package provides a platform to build mail and messaging applications. Lets go with an example.</p>\n<h2>Sending a simple text message</h2>\n<pre class=\"brush:java\">// Common variables\nString host = \"your_smtp_server\";\nString from = \"from_address\";\nString to = \"to_address\";\n<p>// Set properties\nProperties props = new Properties();\nprops.put(\"mail.smtp.host\", host);\nprops.put(\"mail.debug\", \"true\");</p>\n<p>// Get session\nSession session = Session.getInstance(props);</p>\n<p>try {\n// Instantiate a message\nMessage msg = new MimeMessage(session);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">// Set the FROM message\nmsg.setFrom(new InternetAddress(from));\n\n// The recipients can be more than one so we use an array but you can\n// use &#39;new InternetAddress(to)&#39; for only one address.\nInternetAddress[] address = {new InternetAddress(to)};\nmsg.setRecipients(Message.RecipientType.TO, address);\n\n// Set the message subject and date we sent it.\nmsg.setSubject(&quot;Email from JavaMail test&quot;);\nmsg.setSentDate(new Date());\n\n// Set message content\nmsg.setText(&quot;This is the text for this simple demo using JavaMail.&quot;);\n\n// Send the message\nTransport.send(msg);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>}\ncatch (MessagingException mex) {\nmex.printStackTrace();\n}</pre></p>\n<p>Alternatively, instead using:</p>\n<pre class=\"brush:java\">msg.setText(\"This is the text for this simple demo using JavaMail.\");</pre>\n<p>you can use next to set the message content:</p>\n<pre class=\"brush:java\">msg.setContent(\"This is the text for this simple demo using JavaMail.\", \"text/plain\");</pre>\n<h3>Checking an email address</h3>\n<p>Here is a little trick to check, using a regular expression, if an email address is well formed:</p>\n<pre class=\"brush:java\">Pattern rfc2822 = Pattern.compile(\"^[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$\");\nif(rfc2822.matcher(EMAIL_ADDRESS).matches()) {\n    // Well formed email\n}</pre>\n<h2>Multipart messages</h2>\n<p>That's fine, but usually you don't send simple text messages. Instead you send nice HTML body messages with bold or italic text, images, and so on.</p>\n<blockquote><p>NOTE: See below at <em>references</em> section to see about MIME format which extends the data you can attach to an email to allow multiparts, attachments, etc.</p></blockquote>\n<p>When you write a multipart message the content is composed of different parts, for example one part is the message written as simple text and a second part with the same message written in an enhanced way using HTML. Then the client that reads the message is responsible to render the appropriate part depending on its capabilities.</p>\n<pre class=\"brush:java\">...\n...\n// Here create two parts and set as message contect\n// Create and fill first part\nMimeBodyPart part1 = new MimeBodyPart();\npart1.setText(\"This is part one of this multipart message.\");\n<p>// Create and fill second part\nMimeBodyPart part2 = new MimeBodyPart();\npart2.setText(\"This is part two of this multipart message.\");</p>\n<p>// Create the Multipart.\nMultipart mp = new MimeMultipart();\nmp.addBodyPart(part1);\nmp.addBodyPart(part2);</p>\n<p>// Set the message's content\nmsg.setContent(mp);\n...\n...</pre></p>\n<p>&nbsp;</p>\n<h2>Sending attachments</h2>\n<p>Terrific, we know how to send a plain text email and something more incredible like a multipart message with HTML content. Next step is to send an email attaching too some files.</p>\n<p>Create an email with attached file is similar to create a multipart message where one part can be the text of the message and another part is the attached file. The secret is in the next lines:</p>\n<pre class=\"brush:java\">...\n...\n// Create a new part for the attached file\nMimeBodyPart part3 = new MimeBodyPart();\n<p>// Put a file in the second part\nFileDataSource fds = new FileDataSource(\"THE<em>FILE</em>NAME\");\npart3.setDataHandler(new DataHandler(fds));\npart3.setFileName(fds.getName());</p>\n<p>// 'mp' is the previously created 'MimeMultipart' object\nmp.addBodyPart(part3);</p>\n<p>// 'msg' is the previously created 'Message' object\nmsg.setContent(mp);\n...\n...</pre></p>\n<p>&nbsp;</p>\n<h2>HTML messages</h2>\n<p>Create a message o multipart message with HTML content is really easy, simply specify the MIME type in the setContent method:</p>\n<pre class=\"brush:java\">...\n...\nMimeBodyPart htmlPart = new MimeBodyPart();\nhtmlPart.setContent(\"&lt;h1&gt;Sample&lt;/h1&gt;&lt;p&gt;This is a sample HTML part&lt;/p&gt;\", \"text/html\");\n...\n...</pre>\n<h3>Attaching images within the HTML code</h3>\n<p>If you write a rich message using HTML you can, of course, add images using the '<em>img</em>' tag. If the image is referenced from an external server there is no problem, but: how to attach an image to the message and render within the HTML message body?</p>\n<p>The idea is as follow:</p>\n<ul>\n<li>first you need to attach the image file and set an identifier and</li>\n<li>second you need to write your HTML code and reference the image identifier in the '<em>img</em>' tag.</li>\n</ul>\n<pre class=\"brush:java\">...\n...\n// Create and fill html part\nMimeBodyPart htmlPart = new MimeBodyPart();\nhtmlPart.setContent(\"&lt;h1&gt;Sample&lt;/h1&gt;&lt;p&gt;This is a sample HTML part with an attached image&lt;/p&gt;\" +\n\t\"&lt;img src='cid:some_image_id'&gt;\", \"text/html\");\n<p>// Create a new part for the attached image and set the CID image identifier\nMimeBodyPart imagePart = new MimeBodyPart();\nFileDataSource fds = new FileDataSource(\"THE<em>IMAGE</em>FILE<em>NAME\");\nimagePart.setDataHandler(new DataHandler(fds));\nimagePart.setHeader(\"Content-ID\", \"some</em>image_id\");</p>\n<p>mp.addBodyPart(htmlPart);\nmp.addBodyPart(imagePart);\n...\n..</pre></p>\n<h2>Anything more to say?</h2>\n<p>Arrived to this point you are almost a master of sending emails. You know how to send simple emails, multipart emails with richest HTML content and attach files and images on your message.</p>\n<p>What more can a programmer desire?</p>\n<p>Probably, a more easy to use API and that is what <a href=\"http://commons.apache.org/email/index.html\">Apache Commons Email</a> project offer you. See the '<em>user guide</em>' section <a href=\"http://commons.apache.org/email/userguide.html\">http://commons.apache.org/email/userguide.html</a> to understand what I say. It offers a more abstract API more close to humans than to protocols.</p>\n<h2>References</h2>\n<p><a href=\"http://www.oracle.com/technetwork/java/javamail-138606.html\">JavaMail</a> - JavaMail project home page.</p>\n<p><a href=\"http://commons.apache.org/email/\">Apache Commons Email</a> - Apache Commons subproject to simplify the way to work with JavaMail API. See the '<em>user guide</em>' section <a href=\"http://commons.apache.org/email/userguide.html\">http://commons.apache.org/email/userguide.html</a>.</p>\n<p><a href=\"http://en.wikipedia.org/wiki/MIME\">MIME (Multipurpose Internet Mail Extensions)</a> - Description of MIME format for multipart emails.</p>","excerpt":"I start writing this post as a simple \"how to send an email\" using Java, but later I found I need to briefly explain more things. So, here is this kind of allâ€¦","frontmatter":{"date":"08 October, 2011","title":"Sending emails with Java"},"fields":{"slug":"/2011/10/08/sending-emails-with-java/","readingTime":{"text":"5 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2011/10/08/sending-emails-with-java/"}}}