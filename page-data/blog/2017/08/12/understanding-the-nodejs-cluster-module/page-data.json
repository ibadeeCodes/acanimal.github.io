{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2017/08/12/understanding-the-nodejs-cluster-module/","webpackCompilationHash":"4776e6576de27e274acc","result":{"data":{"markdownRemark":{"html":"<p>NodeJS processes runs on a single process, which means it does not take advantage from multi-core systems by default. If you have an 8 core CPU and run a  NodeJS program via <code class=\"language-text\">$ node app.js</code> it will run in a single process, wasting the rest of CPUs.</p>\n<p>Hopefully for us NodeJS offers the <a href=\"https://nodejs.org/api/cluster.html\">cluster</a> module that contains a set of functions and properties that help us to create programs that uses all the CPUs. Not a surprise the mechanism the cluster module uses to maximize the CPU usage was via forking processes, similar to the old <a href=\"http://www.includehelp.com/c-programs/c-fork-function-linux-example.aspx\">fork()</a> system call Unix systems.</p>\n<!--more-->\n<hr>\n<p>More on this series:</p>\n<ol>\n<li><strong>Understanding the NodeJS cluster module</strong></li>\n<li><a href=\"/2017/08/18/using-cluster-module-with-http-servers\">Using cluster module with HTTP servers</a></li>\n<li><a href=\"/2017/08/20/using-pm2-to-manage-cluster\">Using PM2 to manage a NodeJS cluster</a></li>\n<li><a href=\"/2017/08/27/graceful-shutdown-node-processes\">Graceful shutdown NodeJS HTTP server when using PM2</a></li>\n</ol>\n<h2>Introducing the cluster module</h2>\n<p>The cluster module is a NodeJS module that contains a set of functions and properties that help us forking processes to take advantage of multi-core systems. It is propably the first level of scalability you must take care in your node application, specifally if you are working in a HTTP server application, before going to a higher scalability levels (I mean scaling vertically and horizontally in different machines).</p>\n<p>With the cluster module a <em>parent/master</em> process can be forked in any number of <em>child/worker</em> processes and communicate with them sending messages via <a href=\"https://en.wikipedia.org/wiki/Inter-process_communication\">IPC</a> communication. <strong>Remember there is no shared memory among processes.</strong></p>\n<p>Next lines are a compilation of sentences from the NodeJS documentation I have taken the liberty to copy&#x26;pasta to put it in a way I think can help you understand thw whole thing in a few lines.</p>\n<blockquote>\n<p>A single instance of Node.js runs in a single thread. To take advantage of multi-core systems the user will sometimes want to launch a cluster of Node.js processes to handle the load.</p>\n<p>The cluster module allows easy creation of child processes that all share server ports.</p>\n<p>The worker (child) processes are spawned using the <code class=\"language-text\">child_proces.fork()</code> method, so that they can communicate with the parent via IPC and pass server handles back and forth. The <code class=\"language-text\">child_process.fork()</code> method is a special case of <code class=\"language-text\">child_process.spawn()</code> used specifically to spawn new Node.js processes. Like <code class=\"language-text\">child_process.spawn()</code>, a <code class=\"language-text\">ChildProcess</code> object is returned. The returned <code class=\"language-text\">ChildProcess</code> will have an additional communication channel built-in that allows messages to be passed back and forth between the parent and child, through the <code class=\"language-text\">send()</code> method. See <code class=\"language-text\">subprocess.sen()</code> for details.</p>\n<p>It is important to keep in mind that spawned Node.js child processes are independent of the parent with exception of the IPC communication channel that is established between the two. Each process has its own memory, with their own V8 instances. Because of the additional resource allocations required, spawning a large number of child Node.js processes is not recommended.</p>\n</blockquote>\n<p>So, most of the magic is done by the <a href=\"https://nodejs.org/api/child_process.html\">child_process</a> module, which is resposible to spawn new process and help communicate among them, for example, creating pipes. You can find a great article at <a href=\"https://medium.freecodecamp.org/node-js-child-processes-everything-you-need-to-know-e69498fe970a\">Node.js Child Processes: Everything you need to know</a>.</p>\n<h2>A basic example</h2>\n<p>Stop talking and lets see a real exampe. Next we show a very basic code that:</p>\n<ul>\n<li>Creates a master process that retrives the number of CPUs and forks a worker process for each CPU, and</li>\n<li>Each child process prints a message in console and exit.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> cluster <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cluster'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> numCPUs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'os'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cpus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cluster<span class=\"token punctuation\">.</span>isMaster<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">masterProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">childProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">masterProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Master </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is running`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numCPUs<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Forking process number </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">...`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cluster<span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">childProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Worker </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> started and finished`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Save the code in <code class=\"language-text\">app.js</code> file and run executing: <code class=\"language-text\">$ node app.js</code>. The output should be something similar to:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ node app.js\n\nMaster 8463 is running\nForking process number 0<span class=\"token punctuation\">..</span>.\nForking process number 1<span class=\"token punctuation\">..</span>.\nForking process number 2<span class=\"token punctuation\">..</span>.\nForking process number 3<span class=\"token punctuation\">..</span>.\nWorker 8464 started and finished\nWorker 8465 started and finished\nWorker 8467 started and finished\nWorker 8466 started and finished</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Code explanation</h3>\n<p>When we run the <code class=\"language-text\">app.js</code> program an OS process is created that starts running our code. At the beginning the cluster mode is imported <code class=\"language-text\">const cluster = require(&#39;cluster&#39;)</code> and in the <code class=\"language-text\">if</code> sentence we check if the <code class=\"language-text\">isMaster</code> property.</p>\n<p>Because the process is the <em>first</em> process the <code class=\"language-text\">isMaster</code> property is <code class=\"language-text\">true</code> and then we run the code of <code class=\"language-text\">masterProcess</code> function. This function has not much secret, it loops depending on the number of CPUs of your machine and forks the current process using the <code class=\"language-text\">cluster.fork()</code> method.</p>\n<p>What the <code class=\"language-text\">fork()</code> really does is to create a new node process, like if you run it via command line with <code class=\"language-text\">$node app.js</code>, that is you have many processes running your <code class=\"language-text\">app.js</code> program.</p>\n<p>When a child process is created and executed, it does the same as the master, that is, imports the cluster module and executes the <code class=\"language-text\">if</code> statement. Once of the differences is for the child process the value of <code class=\"language-text\">cluster.isMaster</code> is <code class=\"language-text\">false</code>, so they ends running the <code class=\"language-text\">childProcess</code> function.</p>\n<p>Note, we explicitly terminate the master and worker processes with <code class=\"language-text\">process.exit()</code>, which by default return value of zero. </p>\n<blockquote>\n<p>NOTE: NodeJS also offers the <a href=\"https://nodejs.org/api/child_process.html\">Child Processes</a> module that simplifies the creation and comunication with other processes. For example we can spawn the <code class=\"language-text\">ls -l</code> terminal command and pipe with another process that handles the results.</p>\n</blockquote>\n<h2>Comunicating master and worker processes</h2>\n<p>When a worker process is created, an IPC channel is created among the worker and the master, allowing us to communicated between them with the <code class=\"language-text\">send()</code> method, which accepts a JavaScript object as parameter. Remember they are different processes (not threads) so we can't use shared memory as a way of communcation.</p>\n<p>From the master process, we can send a message to a worker process using the process reference, i.e. <code class=\"language-text\">someChild.send({ ... })</code>, and within the worker process we can messages to the master simply using the current <code class=\"language-text\">process</code> reference, i.e. <code class=\"language-text\">process.send()</code>.</p>\n<p>We have updated slighly the previous code to allow master send and receive messages from/to the workers and also the workers receive and send messages from the master process:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">childProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Worker </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> started`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Worker </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> recevies message '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Worker </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> sends message to master...`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> msg<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`Message from worker </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Worker </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> finished`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The worker process is simply to understand. First we listen for the <code class=\"language-text\">message</code> event registering a listener with the <code class=\"language-text\">process.on(&#39;message&#39;, handler)</code> method. Later we send a messages with <code class=\"language-text\">process.send({...})</code>. Note the message is a plain JavaScript object.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> workers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">masterProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Master </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is running`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Fork workers</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numCPUs<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Forking process number </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">...`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> cluster<span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    workers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Listen for messages from worker</span>\n    worker<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Master </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> recevies message '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' from worker </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>worker<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Send message to the workers</span>\n  workers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">worker</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Master </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> sends message to worker </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>worker<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">...`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    worker<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> msg<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`Message from master </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The <code class=\"language-text\">masterProcess</code> function has been divided in two parts. In the first loop we fork as much workers as CPUs we have. The <code class=\"language-text\">cluster.fork()</code> returns a <code class=\"language-text\">worker</code> object representing the worker process, we store the reference in an array and register a listener to receive messages that comes from that worker instance.</p>\n<p>Later, we loop over the array of workers and send a message from the master process to that concrete worker.</p>\n<p>If you run the code the output will be something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ node app.js\n\nMaster 4045 is running\nForking process number 0<span class=\"token punctuation\">..</span>.\nForking process number 1<span class=\"token punctuation\">..</span>.\nMaster 4045 sends message to worker 4046<span class=\"token punctuation\">..</span>.\nMaster 4045 sends message to worker 4047<span class=\"token punctuation\">..</span>.\nWorker 4047 started\nWorker 4047 sends message to master<span class=\"token punctuation\">..</span>.\nWorker 4047 finished\nMaster 4045 recevies message <span class=\"token string\">'{\"msg\":\"Message from worker 4047\"}'</span> from worker 4047\nWorker 4047 recevies message <span class=\"token string\">'{\"msg\":\"Message from master 4045\"}'</span>\nWorker 4046 started\nWorker 4046 sends message to master<span class=\"token punctuation\">..</span>.\nWorker 4046 finished\nMaster 4045 recevies message <span class=\"token string\">'{\"msg\":\"Message from worker 4046\"}'</span> from worker 4046\nWorker 4046 recevies message <span class=\"token string\">'{\"msg\":\"Message from master 4045\"}'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Here we are not terminating the process with <code class=\"language-text\">process.exit()</code> so to close the application you need to use <code class=\"language-text\">ctrl+c</code>.</p>\n<h2>Conclusion</h2>\n<p>The <a href=\"https://nodejs.org/api/cluster.html\">cluster module</a> offers to NodeJS the needed capabilities to use the whole power of a CPU. Although not seen in this post, the cluster module is complemented with the <a href=\"https://nodejs.org/api/child_process.html\">child process</a> module that offers plenty of tools to work with processes: start, stop and pipe input/out, etc.</p>\n<p>Cluster module allow us to easily create worker processes. In addition it <strong>magically</strong> creates an IPC channel to communicate the master and worker process passing JavaScript objects.</p>\n<p>In my next post I will show how important is the cluster module when working in an HTTP server, no matter if an API or web server working with ExpressJS. The cluster module can increase performance of our application having as many worker processes as CPUs cores.</p>","excerpt":"NodeJS processes runs on a single process, which means it does not take advantage from multi-core systems by default. If you have an 8 core CPU and run a  NodeJS program via  it will run in a single process, wasting the rest of CPUs. Hopefully for us NodeJS offers the cluster module that contains a set of functions and properties that help us to create programs that uses all the CPUs. Not a surprise the mechanism the cluster module uses to maximize the CPU usage was via forking processes, similar to the old fork() system call Unix systems.","frontmatter":{"date":"12 August, 2017","title":"Understanding the NodeJS cluster module"},"fields":{"slug":"/blog/2017/08/12/understanding-the-nodejs-cluster-module/","readingTime":{"text":"8 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2017/08/12/understanding-the-nodejs-cluster-module/"}}}