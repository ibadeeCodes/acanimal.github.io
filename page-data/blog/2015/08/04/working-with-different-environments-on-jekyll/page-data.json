{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2015/08/04/working-with-different-environments-on-jekyll/","webpackCompilationHash":"dfd26dbe3cbb7e082b48","result":{"data":{"markdownRemark":{"html":"<p><a href=\"http://jekyllrb.com/\">Jekyll</a> is an open source static site generator. It allows writing content in markdown (also HTML) using some rules, like adding some front matter on pages or posts. Later jekyll <em>compiles</em> all the code and generates an static version for each page and post.</p>\n<p>The benefits of having an static site are mainly speed. Contrary to other blog engines like WordPress, where each request requires server works querying data, processing and returning the page, jekyll only does that work once, when the static site is built.</p>\n<p>Jekyll is also well known by the fact it is used by GitHub. If you host your jekyll posts on a GitHub repository you don't require to compile them because GitHub does for you each time you make a commit. If you are interested on this topic see <a href=\"https://pages.github.com/\">pages</a> and take a look at <a href=\"https://help.github.com/categories/github-pages-basics/\">pages basics</a>.</p>\n<p>A few days ago I migrate this blog from WordPress to Jekyll. Note its source code, with all the post I wrote and will write al publicly available at <a href=\"https://github.com/acanimal/acuriousanimal-blog.github.io\">https://github.com/acanimal/acuriousanimal-blog.github.io</a>.</p>\n<p>The method I follow to write is:</p>\n<ul>\n<li>I write in my local version of jekyll. Once I finish an article...</li>\n<li>I run jekyll locally to see all looks fine. If all is fine...</li>\n<li>I commit the changes to the GitHub repository. This makes GitHub compiles the posts and generates the same content like me.</li>\n</ul>\n<p>Something I missed from the beginning was the possibility to have a different configuration depending if on the environment. When working locally I want all links and images point to my local computer, while when I upload content to GitHub I want links to be relative to GitHub hosting.</p>\n<p>Hopefully this is really easy to achieve using more than one configuration file.</p>\n<p>I have a main <code class=\"language-text\">_config.yml</code> where all variables are set. Next is part of my current configuration file:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"A Curious Animal\"</span>\n<span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Born to be curious, born to be animal !!!\"</span>\n<span class=\"token key atrule\">meta_description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"technology, gis, javascript, web, mapping, openlayers, leaflet, jquery, acuriousanimal, acanimal\"</span>\n<span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span>            <span class=\"token string\">\"http://blog.acuriousanimal.com\"</span>\n<span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span>         <span class=\"token string\">\"acanimal\"</span>\n<span class=\"token key atrule\">author_description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Computer Science, passionate programmer and an eternal rookie guitar player.\"</span>\n\n<span class=\"token key atrule\">markdown</span><span class=\"token punctuation\">:</span> redcarpet\n<span class=\"token key atrule\">highlighter</span><span class=\"token punctuation\">:</span> pygments</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In addition, I have a <code class=\"language-text\">_config-dev-yml</code> file I only use when working locally. This files contains all variables I want to redefine when working locally. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span>    <span class=\"token string\">'http://localhost:4000'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Jekyll commands allow to specify more than one configuration file. We simply must remember a variable existent in a configuration file can be overridden with a value on the second file. Having this in mind, I run jekyll locally with the next command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token operator\">></span> jekyll serve --config _config.yml,_config-dev.yml</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>This produces the value of <code class=\"language-text\">url</code> specified at <code class=\"language-text\">_config.yml</code> becomes overridden by the value of <code class=\"language-text\">url</code> variable specified at <code class=\"language-text\">_config-dev.yml</code>.</p>","excerpt":"Jekyll is an open source static site generator. It allows writing content in markdown (also HTML) using some rules, like adding some front matter on pages or posts. Later jekyll compiles all the code and generates an static version for each page and post. The benefits of having an static site are mainly speed. Contrary to other blog engines like WordPress, where each request requires server works querying data, processing and returning the page, jekyll only does that work once, when the static site is built. Jekyll is also well known by the fact it is used by GitHub. If you host your jekyll posts on a GitHub repository you don't require to compile them because GitHub does for you each time you make a commit. If you are interested on this topic see pages and take a look at pages basics. A few days ago I migrate this blog from WordPress to Jekyll. Note its source code, with all the post I wrote and will write al publicly available at https://github.com/acanimal/acuriousanimal-blog.github.io. The method I follow to write is: I write in my local version of jekyll. Once I finish an article... I run jekyll locally to see all looks fine. If all is fine... I commit the changes to the GitHub repository. This makes GitHub compiles the posts and generates the same content like me. Something I missed from the beginning was the possibility to have a different configuration depending if on the environment. When working locally I want all links and images point to my local computer, while when I upload content to GitHub I want links to be relative to GitHub hosting. Hopefully this is really easy to achieve using more than one configuration file. I have a main  where all variables are set. Next is part of my current configuration file: In addition, I have a  file I only use when working locally. This files contains all variables I want to redefine when working locally. For example: Jekyll commands allow to specify more than one configuration file. We simply must remember a variable existent in a configuration file can be overridden with a value on the second file. Having this in mind, I run jekyll locally with the next command: This produces the value of  specified at  becomes overridden by the value of  variable specified at .","frontmatter":{"date":"04 August, 2015","title":"Working with different environments on jekyll"},"fields":{"slug":"/blog/2015/08/04/working-with-different-environments-on-jekyll/","readingTime":{"text":"3 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2015/08/04/working-with-different-environments-on-jekyll/"}}}