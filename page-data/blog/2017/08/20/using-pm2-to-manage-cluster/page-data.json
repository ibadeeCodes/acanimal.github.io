{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2017/08/20/using-pm2-to-manage-cluster","webpackCompilationHash":"1a07f4d853d389c5c378","result":{"data":{"markdownRemark":{"html":"<p>The cluster module allows us to create worker processes to improve our NodeJS applications performance. This is specially important in web applications, where a master process receives all the requests and load balances them among the worker processes.</p>\n<p>But all this power comes with the cost that must be the application who manages all the complexity associated with process managements: what happens if a worker process exists unexpectedly, how exit gracefully the worker processes, what if you need to restart all your workers, etc.</p>\n<p>In this post we present <a href=\"http://pm2.keymetrics.io\">PM2</a> tool. although it is a general process manager, that means it can manage any kind of process like python, ruby, ... and not only NodeJS processes, the tool is specially designed to manage NodeJS applications that want to work with the cluster module.</p>\n<!--more-->\n<hr>\n<p>More on this series:</p>\n<ol>\n<li><a href=\"/2017/08/12/understanding-the-nodejs-cluster-module\">Understanding the NodeJS cluster module</a></li>\n<li><a href=\"/2017/08/18/using-cluster-module-with-http-servers\">Using cluster module with HTTP servers</a></li>\n<li><strong>Using PM2 to manage a NodeJS cluster</strong></li>\n<li><a href=\"/2017/08/27/graceful-shutdown-node-processes\">Graceful shutdown NodeJS HTTP server when using PM2</a></li>\n</ol>\n<h2>Introducing PM2</h2>\n<p>As said previously, PM2 is a general process manager, that is, a program that controls the execution of other process (like a python program that check if you have new emails) and does things like: check your process is running, re-execute your process if for some reason it exits unexpectedly, log its output, etc.</p>\n<p>The most important thing for us is PM2 simplifies the execution of NodeJS applications to run as a cluster. Yes, you write your application without worrying about cluster module and is PM2 who creates a given number of worker processes to run your application.</p>\n<h3>The hard part of cluster module</h3>\n<p>Lets see an example where we create a very basic HTTP server using the cluster module. The master process will spawn as many workers as CPUs and will take care if any of the workers exists to spawn a new worker.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> cluster <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cluster'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> numCPUs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'os'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cpus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cluster<span class=\"token punctuation\">.</span>isMaster<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">masterProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">childProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">masterProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Master </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is running`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numCPUs<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Forking process number </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">...`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cluster<span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  cluster<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exit'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">worker<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">,</span> signal</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Worker </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>worker<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> died`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Forking a new process...`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cluster<span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">childProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Worker </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> started...`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The worker process is a very simple HTTP server listening on port 3000 and programmed to return a <code class=\"language-text\">Hello World</code> and exit (to simulate a failure).</p>\n<p>If we run the program with <code class=\"language-text\">$ node app.js</code> the output will show something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ node app.js\n\nMaster 2398 is running\nForking process number 0<span class=\"token punctuation\">..</span>.\nForking process number 1<span class=\"token punctuation\">..</span>.\nWorker 2399 started<span class=\"token punctuation\">..</span>.\nWorker 2400 started<span class=\"token punctuation\">..</span>.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If we go to browser at URL <code class=\"language-text\">http://localhost:3000</code> we will get a <code class=\"language-text\">Hello World</code> and in the console see something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">Worker 2400 died\nForking a new process<span class=\"token punctuation\">..</span>.\nWorker 2401 started<span class=\"token punctuation\">..</span>.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>That's very nice, now lets go to see how PM2 can simplify our application.</p>\n<h3>The PM2 way</h3>\n<p>Before continue, you need to instal PM2 on your system. Typically it is installed as a global module with <code class=\"language-text\">$ npm install pm2 -g</code> or <code class=\"language-text\">$ yarn global add pm2</code>.</p>\n<p>When using PM2 we can forget the part of the code related with the master process, that will responsibility of PM2, so our very basic HTTP server can be rewritten as:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Worker </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> started...`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now run PM2 with <code class=\"language-text\">$ pm2 start app.js -i 3</code> and you will see an output similar to:</p>\n<blockquote>\n<p>Note the option <code class=\"language-text\">-i</code> that is used to indicate the number of instances to create. The idea is that number be the same as your number of CPU cores. If you don't know them you can set <code class=\"language-text\">-i 0</code> to leave PM2 detect it automatically.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ pm2 start app.js -i 3\n\n<span class=\"token punctuation\">[</span>PM2<span class=\"token punctuation\">]</span> Starting /Users/blablabla/some-project/app.js <span class=\"token keyword\">in</span> cluster_mode <span class=\"token punctuation\">(</span>3 instances<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>PM2<span class=\"token punctuation\">]</span> Done.\n\n<span class=\"token operator\">|</span> Name      <span class=\"token operator\">|</span> mode    <span class=\"token operator\">|</span> status <span class=\"token operator\">|</span> ↺ <span class=\"token operator\">|</span> cpu <span class=\"token operator\">|</span> memory    <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> ----------<span class=\"token operator\">|</span>---------<span class=\"token operator\">|</span>--------<span class=\"token operator\">|</span>---<span class=\"token operator\">|</span>-----<span class=\"token operator\">|</span>-----------<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> app       <span class=\"token operator\">|</span> cluster <span class=\"token operator\">|</span> online <span class=\"token operator\">|</span> 0 <span class=\"token operator\">|</span> 23% <span class=\"token operator\">|</span> 27.1 MB   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> app       <span class=\"token operator\">|</span> cluster <span class=\"token operator\">|</span> online <span class=\"token operator\">|</span> 0 <span class=\"token operator\">|</span> 26% <span class=\"token operator\">|</span> 27.3 MB   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> app       <span class=\"token operator\">|</span> cluster <span class=\"token operator\">|</span> online <span class=\"token operator\">|</span> 0 <span class=\"token operator\">|</span> 14% <span class=\"token operator\">|</span> 25.1 MB   <span class=\"token operator\">|</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We can see the application logs running <code class=\"language-text\">$ pm2 log</code>. Now when accessing the the <code class=\"language-text\">http://localhost:3000</code> URL we will see logs similar to:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">PM2        <span class=\"token operator\">|</span> App name:app id:0 disconnected\nPM2        <span class=\"token operator\">|</span> App <span class=\"token punctuation\">[</span>app<span class=\"token punctuation\">]</span> with <span class=\"token function\">id</span> <span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span> and pid <span class=\"token punctuation\">[</span>1299<span class=\"token punctuation\">]</span>, exited with code <span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span> via signal <span class=\"token punctuation\">[</span>SIGINT<span class=\"token punctuation\">]</span>\nPM2        <span class=\"token operator\">|</span> Starting execution sequence <span class=\"token keyword\">in</span> -cluster mode- <span class=\"token keyword\">for</span> app name:app id:0\nPM2        <span class=\"token operator\">|</span> App name:app id:0 online\n0<span class=\"token operator\">|</span>app      <span class=\"token operator\">|</span> Worker 1489 started<span class=\"token punctuation\">..</span>.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We can see how PM2 process detects one of our workers has exit and automatically starts a new instance.</p>\n<h2>Conclusions</h2>\n<p>Although the NodeJS cluster module is a powerful mechanism to improve performance it comes at the cost of complexity required to manage all the situations an application can found: what happens if a worker exists, how can we reload the application cluster without down time, etc.</p>\n<p>PM2 is a process manager specially designed to work with NodeJS clusters. It allow to cluster an application, restart or reload, without the required code complexity in addition to offer tools to see log outputs, monitorization, etc.</p>\n<h2>References</h2>\n<p><a href=\"https://keymetrics.io/2015/03/26/pm2-clustering-made-easy/\">Node.js clustering made easy with PM2</a></p>","excerpt":"The cluster module allows us to create worker processes to improve our NodeJS applications performance. This is specially important in web applications, where a master process receives all the requests and load balances them among the worker processes. But all this power comes with the cost that must be the application who manages all the complexity associated with process managements: what happens if a worker process exists unexpectedly, how exit gracefully the worker processes, what if you need to restart all your workers, etc. In this post we present PM2 tool. although it is a general process manager, that means it can manage any kind of process like python, ruby, ... and not only NodeJS processes, the tool is specially designed to manage NodeJS applications that want to work with the cluster module.","frontmatter":{"date":"20 August, 2017","title":"Using PM2 to manage NodeJS cluster"},"fields":{"slug":"/blog/2017/08/20/using-pm2-to-manage-cluster","readingTime":{"text":"5 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2017/08/20/using-pm2-to-manage-cluster"}}}