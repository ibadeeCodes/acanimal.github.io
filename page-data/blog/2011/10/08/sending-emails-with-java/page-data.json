{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2011/10/08/sending-emails-with-java","webpackCompilationHash":"a74464f2a2f58d5242cc","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p><em>Update</em>: This article is a bit outdated ðŸ˜… You can find a nice read at the blog post <strong><a href=\"https://blog.mailtrap.io/sending-email-using-java\">Guide to Send Emails in Java</a></strong> from the mailtrap.io team.</p>\n</blockquote>\n<p>I start writing this post as a simple \"how to send an email\" using Java, but later I found I need to briefly explain more things. So, here is this kind of <em>all in one summary about sending emails with Java</em>.</p>\n<p>Outside the Java SE platform, but included in JavaEE one, the <a href=\"http://www.oracle.com/technetwork/java/javamail/index.html\">JavaMail</a> package provides a platform to build mail and messaging applications. Lets go with an example.</p>\n<h2>Sending a simple text message</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token comment\">// Common variables</span>\n<span class=\"token class-name\">String</span> host <span class=\"token operator\">=</span> <span class=\"token string\">\"your_smtp_server\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> from <span class=\"token operator\">=</span> <span class=\"token string\">\"from_address\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> <span class=\"token keyword\">to</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"to_address\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Set properties</span>\n<span class=\"token class-name\">Properties</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nprops<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.smtp.host\"</span><span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nprops<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.debug\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Get session</span>\n<span class=\"token class-name\">Session</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">Session</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Instantiate a message</span>\n    <span class=\"token class-name\">Message</span> msg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MimeMessage</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Set the FROM message</span>\n    msg<span class=\"token punctuation\">.</span><span class=\"token function\">setFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InternetAddress</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// The recipients can be more than one so we use an array but you can</span>\n    <span class=\"token comment\">// use 'new InternetAddress(to)' for only one address.</span>\n    <span class=\"token class-name\">InternetAddress</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> address <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InternetAddress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    msg<span class=\"token punctuation\">.</span><span class=\"token function\">setRecipients</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RecipientType</span><span class=\"token punctuation\">.</span>TO<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Set the message subject and date we sent it.</span>\n    msg<span class=\"token punctuation\">.</span><span class=\"token function\">setSubject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email from JavaMail test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    msg<span class=\"token punctuation\">.</span><span class=\"token function\">setSentDate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Set message content</span>\n    msg<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is the text for this simple demo using JavaMail.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Send the message</span>\n    <span class=\"token class-name\">Transport</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MessagingException</span> mex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Alternatively, instead using:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\">msg<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is the text for this simple demo using JavaMail.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>you can use next to set the message content:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\">msg<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is the text for this simple demo using JavaMail.\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>Checking an email address</h3>\nHere is a little trick to check, using a regular expression, if an email address is well formed:\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">Pattern</span> rfc2822 <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^[a-z0-9!#$%&amp;amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;amp;'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rfc2822<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>EMAIL_ADDRESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Well formed email</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Multipart messages</h2>\n<p>That's fine, but usually you don't send simple text messages. Instead you send nice HTML body messages with bold or italic text, images, and so on.</p>\n<blockquote>\n<p>NOTE: See below at <em>references</em> section to see about MIME format which extends the data you can attach to an email to allow multiparts, attachments, etc.</p>\n</blockquote>\n<p>When you write a multipart message the content is composed of different parts, for example one part is the message written as simple text and a second part with the same message written in an enhanced way using HTML. Then the client that reads the message is responsible to render the appropriate part depending on its capabilities.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// Here create two parts and set as message contect</span>\n<span class=\"token comment\">// Create and fill first part</span>\n<span class=\"token class-name\">MimeBodyPart</span> part1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MimeBodyPart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npart1<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is part one of this multipart message.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create and fill second part</span>\n<span class=\"token class-name\">MimeBodyPart</span> part2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MimeBodyPart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npart2<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is part two of this multipart message.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create the Multipart.</span>\n<span class=\"token class-name\">Multipart</span> mp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MimeMultipart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmp<span class=\"token punctuation\">.</span><span class=\"token function\">addBodyPart</span><span class=\"token punctuation\">(</span>part1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmp<span class=\"token punctuation\">.</span><span class=\"token function\">addBodyPart</span><span class=\"token punctuation\">(</span>part2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Set the message's content</span>\nmsg<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Â </p>\n<h2>Sending attachments</h2>\n<p>Terrific, we know how to send a plain text email and something more incredible like a multipart message with HTML content. Next step is to send an email attaching too some files.</p>\n<p>Create an email with attached file is similar to create a multipart message where one part can be the text of the message and another part is the attached file. The secret is in the next lines:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// Create a new part for the attached file</span>\n<span class=\"token class-name\">MimeBodyPart</span> part3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MimeBodyPart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Put a file in the second part</span>\n<span class=\"token class-name\">FileDataSource</span> fds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileDataSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"THE_FILE_NAME\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npart3<span class=\"token punctuation\">.</span><span class=\"token function\">setDataHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DataHandler</span><span class=\"token punctuation\">(</span>fds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npart3<span class=\"token punctuation\">.</span><span class=\"token function\">setFileName</span><span class=\"token punctuation\">(</span>fds<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'mp' is the previously created 'MimeMultipart' object</span>\nmp<span class=\"token punctuation\">.</span><span class=\"token function\">addBodyPart</span><span class=\"token punctuation\">(</span>part3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'msg' is the previously created 'Message' object</span>\nmsg<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Â </p>\n<h2>HTML messages</h2>\n<p>Create a message o multipart message with HTML content is really easy, simply specify the MIME type in the setContent method:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">MimeBodyPart</span> htmlPart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MimeBodyPart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhtmlPart<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;lt;h1&amp;gt;Sample&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;This is a sample HTML part&amp;lt;/p&amp;gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Attaching images within the HTML code</h3>\nIf you write a rich message using HTML you can, of course, add images using the '<em>img</em>' tag. If the image is referenced from an external server there is no problem, but: how to attach an image to the message and render within the HTML message body?\n<p>The idea is as follow:</p>\n<ul>\n<li>first you need to attach the image file and set an identifier and</li>\n<li>second you need to write your HTML code and reference the image identifier in the '<em>img</em>' tag.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// Create and fill html part</span>\n<span class=\"token class-name\">MimeBodyPart</span> htmlPart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MimeBodyPart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhtmlPart<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;lt;h1&amp;gt;Sample&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;This is a sample HTML part with an attached image&amp;lt;/p&amp;gt;\"</span> <span class=\"token operator\">+</span>\n\t<span class=\"token string\">\"&amp;lt;img src='cid:some_image_id'&amp;gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a new part for the attached image and set the CID image identifier</span>\n<span class=\"token class-name\">MimeBodyPart</span> imagePart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MimeBodyPart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">FileDataSource</span> fds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileDataSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"THE_IMAGE_FILE_NAME\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimagePart<span class=\"token punctuation\">.</span><span class=\"token function\">setDataHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DataHandler</span><span class=\"token punctuation\">(</span>fds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimagePart<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-ID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"some_image_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmp<span class=\"token punctuation\">.</span><span class=\"token function\">addBodyPart</span><span class=\"token punctuation\">(</span>htmlPart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmp<span class=\"token punctuation\">.</span><span class=\"token function\">addBodyPart</span><span class=\"token punctuation\">(</span>imagePart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Anything more to say?</h2>\n<p>Arrived to this point you are almost a master of sending emails. You know how to send simple emails, multipart emails with richest HTML content and attach files and images on your message.</p>\n<p>What more can a programmer desire?</p>\n<p>Probably, a more easy to use API and that is what <a href=\"http://commons.apache.org/email/index.html\">Apache Commons Email</a> project offer you. See the '<em>user guide</em>' section <a href=\"http://commons.apache.org/email/userguide.html\">http://commons.apache.org/email/userguide.html</a> to understand what I say. It offers a more abstract API more close to humans than to protocols.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"http://www.oracle.com/technetwork/java/javamail-138606.html\">JavaMail</a> - JavaMail project home page.</li>\n<li><a href=\"http://commons.apache.org/email/\">Apache Commons Email</a> - Apache Commons subproject to simplify the way to work with JavaMail API. See the '<em>user guide</em>' section <a href=\"http://commons.apache.org/email/userguide.html\">http://commons.apache.org/email/userguide.html</a>.</li>\n<li><a href=\"http://en.wikipedia.org/wiki/MIME\">MIME (Multipurpose Internet Mail Extensions)</a> - Description of MIME format for multipart emails.</li>\n</ul>","excerpt":"Update: This article is a bit outdated ðŸ˜… You can find a nice read at the blog post Guide to Send Emails in Java from the mailtrap.io team. I start writing this post as a simple \"how to send an email\" using Java, but later I found I need to briefly explain more things. So, here is this kind of all in one summary about sending emails with Java. Outside the Java SE platform, but included in JavaEE one, the JavaMail package provides a platform to build mail and messaging applications. Lets go with an example. Sending a simple text message Alternatively, instead using: you can use next to set the message content: Multipart messages That's fine, but usually you don't send simple text messages. Instead you send nice HTML body messages with bold or italic text, images, and so on. NOTE: See below at references section to see about MIME format which extends the data you can attach to an email to allow multiparts, attachments, etc. When you write a multipart message the content is composed of different parts, for example one part is the message written as simple text and a second part with the same message written in an enhanced way using HTML. Then the client that reads the message is responsible to render the appropriate part depending on its capabilities. Â  Sending attachments Terrific, we know how to send a plain text email and something more incredible like a multipart message with HTML content. Next step is to send an email attaching too some files. Create an email with attached file is similar to create a multipart message where one part can be the text of the message and another part is the attached file. The secret is in the next lines: Â  HTML messages Create a message o multipart message with HTML content is really easy, simply specify the MIME type in the setContent method: The idea is as follow: first you need to attach the image file and set an identifier and second you need to write your HTML code and reference the image identifier in the 'img' tag. Anything more to say? Arrived to this point you are almost a master of sending emails. You know how to send simple emails, multipart emails with richest HTML content and attach files and images on your message. What more can a programmer desire? Probably, a more easy to use API and that is what Apache Commons Email project offer you. See the 'user guide' section http://commons.apache.org/email/userguide.html to understand what I say. It offers a more abstract API more close to humans than to protocols. References JavaMail - JavaMail project home page. Apache Commons Email - Apache Commons subproject to simplify the way to work with JavaMail API. See the 'user guide' section http://commons.apache.org/email/userguide.html. MIME (Multipurpose Internet Mail Extensions) - Description of MIME format for multipart emails.","frontmatter":{"date":"08 October, 2011","title":"Sending emails with Java"},"fields":{"slug":"/blog/2011/10/08/sending-emails-with-java","readingTime":{"text":"5 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2011/10/08/sending-emails-with-java"}}}