{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2011/03/06/downloading-files-from-aemet-ftp-server-with-java-and-apache-commons-net","webpackCompilationHash":"1a07f4d853d389c5c378","result":{"data":{"markdownRemark":{"html":"<p>Some time ago the <a href=\"http://www.aemet.es\">AEMET</a>, the Spanish governmentÂ meteorological agency, release many of its data publicly: weather radar, weather stations, lightnings, ...  The way they do is simple andÂ effective:Â public the contents on a FTP server and update on regular intervals of time.  Talking with a colleague we decide to create (on our very few free time) a simple web page that allows people to see the current values of the weather stations. A map of Spain with some dots representing weather stations and a graph with showing data from the selected station.</p>\n<blockquote>\n<p><strong>Update: This service was stopped in 2012 by Spanish government ðŸ˜”</strong></p>\n</blockquote>\n<h2>The data</h2>\n<p>The kind of data we are looking for is stored in the '<em>/datos_observacion/observaciones_diezminutales</em>' folder of the FTP sever. Within it we can found two types of folders, ended with '<em>diezminutales</em>' or '<em>estaciones</em>'. We will work with the first one.  For every day we will found a '<em>YYYYMMDD_diezminutales</em>' folder which contains the day data specify by <em>YYYYMMDD</em>. Inside it new files are created names '<em>YYYYMMDDHHmm_datos.csv.gz</em>' which contains all the weather stations data for the 10minutes interval.  We also need to take into account one more consideration. A file is not immutable, that means you can read a file with some data (or file Â size) and in 1 hour it can have more new data (bigger file size) because some new data has recovery and corresponds to that interval.</p>\n<h2>The design</h2>\n<p>The idea is to create some simple program that given a date (YYYYMMDD) synchronizes the corresponding remote Â '<em>YYYYMMDD_diezminutales</em>' folder with a local one. This way we can maintain locally and update copy of the files.  Once files are locally stored a different process, that means a different post :), is responsible to handle data in the right way to be used by the web application.  The summary of steps are:</p>\n<ol>\n<li>Given a YYYYMMDD check if theÂ remote Â '<em>YYYYMMDD_diezminutales</em>' folder exists.Â If so, then synchronize it locally:\n<ol>\n<li>Create a local '<em>YYYYMMDD_diezminutales</em>'Â folder if not exists.</li>\n<li>For every file on remote folder:\n<ol>\n<li>Download if it doesn't exists or his size has changes.</li>\n<li>Otherwise, ignore if it.</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2>The implementation</h2>\n<p>Because I'm more experienced with Java I have used it to code a little program to do the previously commented synchronization. To make FTP request I have used the <a href=\"http://commons.apache.org/net/\">Apache Commons Net</a> project. From its web page we can read:</p>\n<blockquote><p>Apache Commons Net implements the client side of many basic Internet protocols.</p></blockquote>\n<h3>The Main class</h3>\n<p>This is the starter point. User must execute the program specifying a year-month-day to check YYYY-MM-DD, something like:</p>\n<pre class=\"brush:shell\">java -jar \"aemet_v1.jar\" 2011-01-25</pre>\n<p>Lets talk a bit about the main program. The first to do is to ensure user has specified a valid date:</p>\n<pre class=\"brush:java\">if (args.length != 1) {\n    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, \"You must supply once argument like YYYY-MM-DD.\");\n    System.exit(1);\n}\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\nDate date = sdf.parse(args[0]);</pre>\n<p>Second, we create the folder structure which will hold the local files copy:</p>\n<pre class=\"brush:java\">File localFolder = new File(\"./localDownloads\");\nlocalFolder.mkdir();\n<p>File localFolderObservacions = new File(localFolder, \"observaciones_diezminutales\");\nlocalFolderObservacions.mkdir();</pre></p>\n<p>Finally, we get the files through the use of Â '<em>AdquisicioObservaciones</em>' class:</p>\n<pre class=\"brush:java\">AdquisicioObservaciones adq = new AdquisicioObservaciones(localFolderObservacions);\nadq.get(date);</pre>\n<p>Putting all together:</p>\n<pre class=\"brush:java\">public static void main(String[] args) {\n    try {\n        if (args.length != 1) {\n            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, \"You must supply once argument like YYYY-MM-DD.\");\n            System.exit(1);\n        }\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n        Date date = sdf.parse(args[0]);\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">    File localFolder = new File(&quot;./localDownloads&quot;);\n    localFolder.mkdir();\n\n    File localFolderObservacions = new File(localFolder, &quot;observaciones_diezminutales&quot;);\n    localFolderObservacions.mkdir();\n\n    Calendar c = Utils.getCurrentCalendarUTC();\n    c.setTime(date);\n\n    AdquisicioObservaciones adq = new AdquisicioObservaciones(localFolderObservacions);\n    adq.get(date);\n\n} catch (ParseException ex) {\n    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, ex.getMessage());\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>}</pre></p>\n<h3>The Utils class</h3>\n<p>This is a helper class with some methods used around the code. Mainly it helps creating and setting dates in UTC (because this is the format used by AEMET) and also contains a method that uncompress GZIP files:</p>\n<pre class=\"brush:java\">public static boolean uncompressGzFile(File localfile, File targetlocalfile) {\n    GZIPInputStream in = null;\n    OutputStream out = null;\n    try {\n        in = new GZIPInputStream(new FileInputStream(localfile));\n        out = new FileOutputStream(targetlocalfile);\n        // Transfer bytes from the compressed file to the output file\n        byte[] buf = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) &gt; 0) {\n            out.write(buf, 0, len);\n        }\n        return true;\n    } catch (IOException ex) {\n        logger.severe(ex.getMessage());\n        logger.log(Level.SEVERE, \"There was a problem while uncompressing file ''{0}'' to ''{1}''. Exception message ''{2}''.\",\n                new Object[]{localfile.getName(), targetlocalfile.getName(), ex.getMessage()});\n        return false;\n    } finally {\n        // Close the file and stream\n        if (in != null) {\n            try {\n                in.close();\n            } catch (IOException ex) {\n            }\n        }\n        if (out != null) {\n            try {\n                out.close();\n            } catch (IOException ex) {\n            }\n        }\n    }\n}</pre>\n<h3>TheÂ AdquisicioObservaciones class</h3>\n<p>In class constructor we must specify the local folder were files must be synchronized. Later, we can execute the '<em>get</em>' method as many times we want and for any day we desire.  The '<em>get</em>' method, as we commented, Â needs a date to work:</p>\n<pre class=\"brush:java\">public void get(Date date) {\n    this.date = date;\n    logger.log(Level.INFO, \"{0} - Start: {1}\", new Object[]{AdquisicioObservaciones.class.getName(), Utils.getCurrentFormattedDate()});\n    handleFiles();\n    logger.log(Level.INFO, \"{0} - End: {1}\", new Object[]{AdquisicioObservaciones.class.getName(), Utils.getCurrentFormattedDate()});\n}</pre>\n<p>Mainly it stores the date on a class attribute, prints some log information and delegates the hard work to the '<em>handleFiles</em>' method. First thing this method does is to create a FTP connection and change the remote working directory to '<em>datos_observacion/observaciones_diezminutales</em>' and within it change to the desired day:</p>\n<pre class=\"brush:java\">ftpclient = new FTPClient();\n<p>// Connect to server\nftpclient.connect(server);\nftpclient.setFileTransferMode(FTPClient.BINARY<em>FILE</em>TYPE);</p>\n<p>// Loggin\nif (!ftpclient.login(\"anonymous\", null)) {\nlogger.severe(\"Can't log into FTP\");\nreturn;\n}\n// Change directory\nif (!ftpclient.changeWorkingDirectory(folder)) {\nlogger.log(Level.SEVERE, \"Can''t change to folder ''{0}''.\", folder);\nreturn;\n}\n// Change to day directory\nString remoteDayFolder = Utils.getStringFromDate(this.date) + \"_diezminutales\";\nif (!ftpclient.changeWorkingDirectory(remoteDayFolder)) {\nlogger.log(Level.SEVERE, \"Can''t change to day folder ''{0}''.\", remoteDayFolder);\nreturn;\n}</pre></p>\n<p>Note we set the transfer mode to binary with:</p>\n<pre class=\"brush:java\">ftpclient.setFileTransferMode(FTPClient.BINARY_FILE_TYPE);</pre>\n<p>which is important because files are GZIP compressed. Then if local folder for the specified day doesn't exists it creates one:</p>\n<p>&nbsp;</p>\n<pre class=\"brush:java\">// Create local directori for the day.\nString dayFolder = Utils.getStringFromDate(this.date);\nFile folderDay = new File(this.localFolder, dayFolder);\nif (!folderDay.exists()) {\n    if (!folderDay.mkdir()) {\n        logger.log(Level.SEVERE, \"Can''t create the daily folder ''{0}''\", folderDay.getAbsolutePath());\n        return;\n    }\n}</pre>\n<p>Finally the big part comes here. The code gets the list of remote files and check which one doesn't exist locally or has changed it size:</p>\n<pre class=\"brush:java\">FTPFile[] files = ftpclient.listFiles();\nfor (int i = 0; i &lt; files.length; i++) {\n    FTPFile ftpfile = files[i];\n    long size = ftpfile.getSize();\n    File localfile = new File(folderDay, ftpfile.getName());\n    boolean mustBeRead = false;\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">// Check if file is a real data file\nif (!ftpfile.getName().contains(&quot;_datos&quot;)) {\n    continue;\n}\n\ntotalFiles++;\nif (!localfile.exists()) {\n    logger.log(Level.INFO, &quot;File &#39;&#39;{0}&#39;&#39; doesn&#39;t exist locally&quot;,\n            new Object[]{ftpfile.getName()});\n    mustBeRead = true;\n} else if (Math.abs(localfile.length() - size) &amp;gt; 1) {\n    // Ha vegades la diferencia del fitxer remot i el local difereixen en 1 byte pero son iguals.\n    logger.log(Level.INFO, &quot;File &#39;&#39;{0}&#39;&#39; size changed (before: {1}b, after: {2}b)&quot;,\n            new Object[]{ftpfile.getName(), localfile.length(), size});\n    mustBeRead = true;\n} else {\n    logger.log(Level.INFO, &quot;Ignored file &#39;&#39;{0}&#39;&#39;&quot;, ftpfile.getName());\n    totalIgnored++;\n}\n\n// If we need to read the file then control if any error occurs.\nif (mustBeRead) {\n    try {\n        downloadFile(ftpfile, localfile);\n        totalDownloaded++;\n    } catch (IOException ex) {\n        totalErrors++;\n    } finally {\n        mustBeRead = false;\n    }\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>}</pre></p>\n<p>The next important method is '<em>downloadFile</em>', which requires two parameters the remote FTP file and the local file name where we want to store data. The remote files is retrieved using the FTPClient's '<em>retrieveFile</em>' method and uncompressed with the helper method <em>Utils.uncompressGzFile()</em>:</p>\n<pre class=\"brush:java\">logger.log(Level.INFO, \"Downloading file ''{0}'' at ''{1}''\",\n        new Object[]{ftpfile.getName(), Utils.getCurrentFormattedDate()});\n<p>fos = new FileOutputStream(localfile);\nftpclient.retrieveFile(ftpfile.getName(), fos);</p>\n<p>logger.log(Level.INFO, \"Downloaded finished at ''{0}'' , size:''{1} ''bytes , timestamp: ''{2}''.\",\nnew Object[]{Utils.getCurrentFormattedDate(), ftpfile.getSize(), ftpfile.getTimestamp().getTime()});</p>\n<p>// Uncompress file\nString targetName = localfile.getName().replaceAll(\".gz\", \"\");\nFile targetlocalfile = new File(localfile.getParentFile(), targetName);\nif (Utils.uncompressGzFile(localfile, targetlocalfile)) {\n//\n// TODO - Here you can handle the file.\n} else {\n// If there is any error uncompressing file then remove files to\n// ensure it will be downloaded again.\nlocalfile.delete();\ntargetlocalfile.delete();\n}</pre></p>\n<h2>Conclusions</h2>\n<p>The program is far beyond to be a serious program to maintain a database with all the weather stations data, but can you on how to download files from FTP server using Java.</p>\n<p>More work must be done to get also the metadata information from the weather stations (name, location, etc) and merge together with the observations.Â Hope that will be shown in a next post.</p>\n<p>Finally, simply to say the code is plenty of log messages which can make code cumbersome but gives lot of information about the synchronization process. A typicall output is something like:</p>\n<pre class=\"brush:plain\">06-mar-2011 20:46:28 org.aemetaquisition.AdquisicioObservaciones get\nINFO: org.aemetaquisition.AdquisicioObservaciones - Start: 2011-03-06 20:46:28\n06-mar-2011 20:46:29 org.aemetaquisition.AdquisicioObservaciones handleFiles\nINFO: File '201103040000_datos.csv.gz' doesnt exist locally\n06-mar-2011 20:46:29 org.aemetaquisition.AdquisicioObservaciones downloadFile\nINFO: Downloading file '201103040000_datos.csv.gz' at '2011-03-06 20:46:29'\n06-mar-2011 20:46:29 org.aemetaquisition.AdquisicioObservaciones downloadFile\nINFO: Downloaded finished at '2011-03-06 20:46:29' , size:'13.322 'bytes , timestamp: '5/03/11 0:36'.\n06-mar-2011 20:46:29 org.aemetaquisition.AdquisicioObservaciones handleFiles\n...\n...\n...\nINFO: Downloaded finished at '2011-03-06 20:47:51' , size:'13.596 'bytes , timestamp: '5/03/11 12:36'.\n06-mar-2011 20:47:51 org.aemetaquisition.AdquisicioObservaciones handleFiles\nINFO: Total files 144, Total downloaded 144, Total ignored 0, Total errors: 0\n06-mar-2011 20:47:51 org.aemetaquisition.AdquisicioObservaciones get\nINFO: org.aemetaquisition.AdquisicioObservaciones - End: 2011-03-06 20:47:51</pre>\n<h2>Download</h2>\n<ul>\n<li>Source code: <a href=\"http://www.acuriousanimal.com/code/aemet_v1/aemet_v1.rar\">here</a>. It is bundled as a NetBeans project but can you open with any text editor.</li>\n<li>Binaries: <a href=\"http://www.acuriousanimal.com/code/aemet_v1/aemet_v1_jar.rar\">here</a>.Â Remember to execute the code you must set the day to check, like:\n<pre class=\"brush:shell\">java -jar \"aemet_v1.jar\" 2011-01-25</pre>\n<p>If you execute the program for the same day, only the new files or those with size modified will be processed again.</li>\n</ul>\n<h2>References</h2>\n<ul>\n<li><a href=\"http://commons.apache.org/net/\">http://commons.apache.org/net/</a></li>\n<li><a href=\"http://commons.apache.org/net/\"></a><a href=\"http://www.aemet.es/\">http://www.aemet.es</a></li>\n</ul>","excerpt":"Some time ago the AEMET, the Spanish governmentÂ meteorological agency, release many of its data publicly: weather radar, weather stations, lightnings, ...  The way they do is simple andÂ effective:Â public the contents on a FTP server and update on regular intervals of time.  Talking with a colleague we decide to create (on our very few free time) a simple web page that allows people to see the current values of the weather stations. A map of Spain with some dots representing weather stations and a graph with showing data from the selected station. Update: This service was stopped in 2012 by Spanish government ðŸ˜” File localFolderObservacions = new File(localFolder, \"observaciones_diezminutales\");\nlocalFolderObservacions.mkdir(); } // Connect to server\nftpclient.connect(server);\nftpclient.setFileTransferMode(FTPClient.BINARYFILETYPE); // Loggin\nif (!ftpclient.login(\"anonymous\", null)) {\n    logger.severe(\"Can't log into FTP\");\n    return;\n}\n// Change directory\nif (!ftpclient.changeWorkingDirectory(folder)) {\n    logger.log(Level.SEVERE, \"Can''t change to folder ''{0}''.\", folder);\n    return;\n}\n// Change to day directory\nString remoteDayFolder = Utils.getStringFromDate(this.date) + \"_diezminutales\";\nif (!ftpclient.changeWorkingDirectory(remoteDayFolder)) {\n    logger.log(Level.SEVERE, \"Can''t change to day folder ''{0}''.\", remoteDayFolder);\n    return;\n} } fos = new FileOutputStream(localfile);\nftpclient.retrieveFile(ftpfile.getName(), fos); logger.log(Level.INFO, \"Downloaded finished at ''{0}'' , size:''{1} ''bytes , timestamp: ''{2}''.\",\n        new Object[]{Utils.getCurrentFormattedDate(), ftpfile.getSize(), ftpfile.getTimestamp().getTime()}); // Uncompress file\nString targetName = localfile.getName().replaceAll(\".gz\", \"\");\nFile targetlocalfile = new File(localfile.getParentFile(), targetName);\nif (Utils.uncompressGzFile(localfile, targetlocalfile)) {\n    //\n    // TODO - Here you can handle the file.\n} else {\n    // If there is any error uncompressing file then remove files to\n    // ensure it will be downloaded again.\n    localfile.delete();\n    targetlocalfile.delete();\n}","frontmatter":{"date":"06 March, 2011","title":"Downloading files from AEMET FTP server with Java and Apache Commons Net"},"fields":{"slug":"/blog/2011/03/06/downloading-files-from-aemet-ftp-server-with-java-and-apache-commons-net","readingTime":{"text":"8 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2011/03/06/downloading-files-from-aemet-ftp-server-with-java-and-apache-commons-net"}}}