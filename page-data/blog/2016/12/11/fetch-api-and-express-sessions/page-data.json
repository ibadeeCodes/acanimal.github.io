{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2016/12/11/fetch-api-and-express-sessions/","webpackCompilationHash":"be865f95712747879b43","result":{"data":{"markdownRemark":{"html":"<p><em>TL;DR</em> fetch API is the successor of XHR and although it's really powerful ( see <a href=\"http://stackoverflow.com/questions/35549547/what-is-the-difference-between-the-fetch-api-and-xmlhttprequest\">What is the difference between the Fetch API and XMLHttpRequest?</a>) you should take care of some things, like the fact you are responsible to determine if cookies must be sent to the server.</p>\n<!--more-->\n<p>This is not a tutorial on how to use the <code class=\"language-text\">fetch</code> API neither Express framework. This post is a short reminder on how to work with cookies in an Express application that uses fetch in the client side.</p>\n<hr>\n<h2>My custom scenario</h2>\n<p>Before continue I'm going to describe my application scenario so you can be centered in the <em>problem</em> produced me a real headache.</p>\n<ul>\n<li>Client side application. The user access some URL which serves all the code of the application. From this point all the interaction happens in the client side. (It is a react+redux client side application without server side rendering).</li>\n<li>\n<p>API. Client communicates with the same server that serves the HTML+CSS+JS page, invoking API endpoints for login, create resources, get list of resources, etc.</p>\n<ul>\n<li>API implemented with Express+passport.</li>\n<li>authentication based on sessions. Once the user is logged in a session is created which serves to authenticate next operations.</li>\n</ul>\n</li>\n</ul>\n<h2>fetch, cookies and the <code class=\"language-text\">credentials</code> property</h2>\n<p>Simply remember you must use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials\">credentials</a> property to send cookies in your requests.</p>\n<blockquote>\n<p>The credentials read-only property of the Request interface indicates whether the user agent should send cookies from the other domain in the case of cross-origin requests. This is similar to XHR’s withCredentials flag.</p>\n</blockquote>\n<p>The allowed values are:</p>\n<ul>\n<li><code class=\"language-text\">omit</code>: Never send cookies. <strong>Default value</strong>.</li>\n<li><code class=\"language-text\">same-origin</code>: Only send cookies if the URL is on the same origin as the calling script.</li>\n<li><code class=\"language-text\">include</code>: Always send cookies, even for cross-origin calls.</li>\n</ul>\n<p>So, <strong>you must set the <code class=\"language-text\">credentials</code> property in all your client requests</strong> so that any operation, a login, an operation that retrieves resources or creates a new resource, sends the cookie to the API and can be authenticated. In my case I choose <code class=\"language-text\">credentials: same-origin</code>.</p>\n<p><em>Note, if your API is in a different domain that the page that serves your client code you must use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Request/mode\">mode</a> property too to indicate a CORS request.</em></p>\n<h2>Express, sessions and passport</h2>\n<p>On the server side, the API, we have configured Express to allow sessions and configured passport to store local authentication in sessions. It is important to remember initialize the passport session middleware after the express session one.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> session <span class=\"token keyword\">from</span> <span class=\"token string\">'express-session'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> passport <span class=\"token keyword\">from</span> <span class=\"token string\">'passport'</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  resave<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  saveUninitialized<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  secret<span class=\"token punctuation\">:</span> <span class=\"token string\">'supersecret'</span><span class=\"token punctuation\">,</span>\n  cookie<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    httpOnly<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    secure<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>passport<span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>passport<span class=\"token punctuation\">.</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'env'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'trust proxy'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// trust first proxy</span>\n  sessionOptions<span class=\"token punctuation\">.</span>proxy <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  sessionOptions<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">.</span>secure <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// serve secure cookies</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Lets describe the previous session configuration properties:</p>\n<ul>\n<li>\n<p><code class=\"language-text\">cookies</code>: this object contains configuration on how cookies must be handled in the session.</p>\n<ul>\n<li><code class=\"language-text\">secure</code>: Specified if <code class=\"language-text\">Set-Cookie</code> header will contains <code class=\"language-text\">Secure</code> flag. <strong>Be careful when setting this to true, as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection.</strong></li>\n<li><code class=\"language-text\">httpOnly</code>: Specified if <code class=\"language-text\">Set-Cookie</code> header will contains <code class=\"language-text\">HttpOnly</code> flag. <strong>Be careful when setting this to true, as compliant clients will not allow client-side JavaScript to see the cookie in document.cookie.</strong></li>\n</ul>\n</li>\n</ul>\n<p>This two <code class=\"language-text\">cookies</code> properties can become your worst enemy while developing because usually you do not work using HTTPS. So, take them into account.</p>\n<h2>Final words</h2>\n<p>As always the process of developing is a cycle of <em>pain and ecstasy</em>, where pain is almost always produced by stupid or really subtle things that transform your productive day in a hell.</p>\n<iframe src=\"//giphy.com/embed/4TMqcN59kg3Yc\" width=\"480\" height=\"270\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/burning-dr-steve-brule-4TMqcN59kg3Yc\">via GIPHY</a></p>","excerpt":"TL;DR fetch API is the successor of XHR and although it's really powerful ( see What is the difference between the Fetch API and XMLHttpRequest?) you should…","frontmatter":{"date":"11 December, 2016","title":"fetch API and Express sessions"},"fields":{"slug":"/blog/2016/12/11/fetch-api-and-express-sessions/","readingTime":{"text":"4 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2016/12/11/fetch-api-and-express-sessions/"}}}