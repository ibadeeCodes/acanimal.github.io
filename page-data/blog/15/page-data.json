{"componentChunkName":"component---src-templates-blog-list-js","path":"/blog/15","webpackCompilationHash":"642efac6ed852a3b544d","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"9f37a1dd-d193-545d-900c-36695ccdcc90","frontmatter":{"title":"Using YouTube API to embed videos dinamically on your web site","date":"02 November, 2011","layout":"post"},"fields":{"slug":"/blog/2011/11/02/using-youtube-api-to-embed-videos-on-your-web-site","readingTime":{"text":"5 min read"}},"excerpt":"It is easy to embed a given YouTube video on a web site, simply use the wizard to get code required code, but what about to do the some automatically using JavaScript? Yes, suppose you have a preferred user you follow all his videos and would like to put his/her latest video in your web site."}},{"node":{"id":"0c0abe91-8d89-502b-929f-d30a9d5ef81f","frontmatter":{"title":"Sending emails with Java","date":"08 October, 2011","layout":"post"},"fields":{"slug":"/blog/2011/10/08/sending-emails-with-java","readingTime":{"text":"5 min read"}},"excerpt":"Update: This article is a bit outdated ðŸ˜… You can find a nice read at the blog post Guide to Send Emails in Java from the mailtrap.io team. I start writing this post as a simple \"how to send an email\" using Java, but later I found I need to briefly explain more things. So, here is this kind of all in one summary about sending emails with Java. Outside the Java SE platform, but included in JavaEE one, the JavaMail package provides a platform to build mail and messaging applications. Lets go with an example. Sending a simple text message Alternatively, instead using: you can use next to set the message content: Multipart messages That's fine, but usually you don't send simple text messages. Instead you send nice HTML body messages with bold or italic text, images, and so on. NOTE: See below at references section to see about MIME format which extends the data you can attach to an email to allow multiparts, attachments, etc. When you write a multipart message the content is composed of different parts, for example one part is the message written as simple text and a second part with the same message written in an enhanced way using HTML. Then the client that reads the message is responsible to render the appropriate part depending on its capabilities. Â  Sending attachments Terrific, we know how to send a plain text email and something more incredible like a multipart message with HTML content. Next step is to send an email attaching too some files. Create an email with attached file is similar to create a multipart message where one part can be the text of the message and another part is the attached file. The secret is in the next lines: Â  HTML messages Create a message o multipart message with HTML content is really easy, simply specify the MIME type in the setContent method: The idea is as follow: first you need to attach the image file and set an identifier and second you need to write your HTML code and reference the image identifier in the 'img' tag. Anything more to say? Arrived to this point you are almost a master of sending emails. You know how to send simple emails, multipart emails with richest HTML content and attach files and images on your message. What more can a programmer desire? Probably, a more easy to use API and that is what Apache Commons Email project offer you. See the 'user guide' section http://commons.apache.org/email/userguide.html to understand what I say. It offers a more abstract API more close to humans than to protocols. References JavaMail - JavaMail project home page. Apache Commons Email - Apache Commons subproject to simplify the way to work with JavaMail API. See the 'user guide' section http://commons.apache.org/email/userguide.html. MIME (Multipurpose Internet Mail Extensions) - Description of MIME format for multipart emails."}},{"node":{"id":"d7ed0529-ce20-5f91-a49e-60c16c4da1f7","frontmatter":{"title":"Clinker, a software development ecosystem","date":"27 September, 2011","layout":"post"},"fields":{"slug":"/blog/2011/09/27/clinker-an-software-development-ecosystem","readingTime":{"text":"1 min read"}},"excerpt":"Recently I discovered Clinker, a so called Software Development Ecosystem. Mysteriously there is no definition for Development Ecosystem on Wikipedia yet but a close definition could be:"}},{"node":{"id":"dc0f4fa7-71cf-541a-8a05-54600bb1ef00","frontmatter":{"title":"Crop image on the client side with JCrop and HTML5 canvas element","date":"26 September, 2011","layout":"post"},"fields":{"slug":"/blog/2011/09/26/crop-image-on-the-client-side-with-jcrop-and-html5-canvas-element","readingTime":{"text":"2 min read"}},"excerpt":"Suppose you are working on a nice web application where the user can upload images to, for example, a shop catalogue (mmm... that makes me think on something :p ) but wait... you don't the catalogue uses the whole image you upload instead a piece of it. So, we need to crop the image. function updatePreview(c) {\n\tif(parseInt(c.w) > 0) {\n\t\t// Show image preview\n\t\tvar imageObj = $(\"#target\")0;\n\t\tvar canvas = $(\"#preview\")0;\n\t\tvar context = canvas.getContext(\"2d\");\n\t\tcontext.drawImage(imageObj, c.x, c.y, c.w, c.h, 0, 0, canvas.width, canvas.height);\n\t}\n};"}},{"node":{"id":"c3db2cfd-0b9a-5ff8-a48f-e73d5d21f4fd","frontmatter":{"title":"A word about LESS","date":"29 August, 2011","layout":"post"},"fields":{"slug":"/blog/2011/08/29/a-word-about-less","readingTime":{"text":"2 min read"}},"excerpt":"Woow!!! That is the word that best defines Less."}},{"node":{"id":"c17db88e-4592-5854-8cbe-4b03fa5c0308","frontmatter":{"title":"Customizing jQuery UI Dialog: hiding close button and changing opacity","date":"16 August, 2011","layout":"post"},"fields":{"slug":"/blog/2011/08/16/customizing-jquery-ui-dialog-hiding-close-button-and-changing-opacity","readingTime":{"text":"2 min read"}},"excerpt":"Sometimes when you are programming small things are the hard things, little details becomes difficult to solve and you need to spend lot of time to solve them. This is logically :) because you spent the major part of your time thinking and designing the big or complex things, leaving in a second plane the small things and because this they became the new \"big\" things. Ok, stop talking with buggy sentences and talk about this post. Recently I was working in a web page using jQuery UI dialogs that have a couple of special requirements that takes me some time and because this I want to share here with you:"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":6,"skip":84,"numPages":18,"currentPage":15}}}