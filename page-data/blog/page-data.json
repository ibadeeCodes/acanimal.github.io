{"componentChunkName":"component---src-templates-blog-list-js","path":"/blog","webpackCompilationHash":"be865f95712747879b43","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"56c8cc8f-9492-512e-8901-d897cec8eac5","frontmatter":{"title":"Express API with autogenerated OpenAPI doc through Swagger","date":"20 October, 2018","layout":"post"},"fields":{"slug":"/blog/2018/10/20/express-swagger-doc/","readingTime":{"text":"3 min read"}},"excerpt":"In past years OpenAPI has arise as the preferred way to document APIs. In this article we will see how easy is document an API created with NodeJS and Express through the Swagger tools. If you are working in an REST API you more probably will desire to have some API doc where your users could find what are the endpoints of your API, what they do, which parameters they accept and which output they generate. Swagger Do not confuse OpenAPI with Swagger. OpenAPI is an specification that says how…"}},{"node":{"id":"0fb35b18-bcb5-5d1e-8a5b-038584be627e","frontmatter":{"title":"Joppy, the Tinder for tech recruitment","date":"28 June, 2018","layout":"post"},"fields":{"slug":"/blog/2018/06/30/joppy/","readingTime":{"text":"6 min read"}},"excerpt":"TLTR: This post is about Joppy, a new service I'm working on that tries to eliminate the pain currently exists in the communication among recruiters and tech professionals. Let me describe you the current scenario in the recruitment world and, please, any feedback will be welcome. Tech professionals: Wherever I wrote tech professionals I mean any kind of role related with tech companies: software engineers, developers or programmers, manager, product owners, QA, designers, ... It all starts…"}},{"node":{"id":"11a9f91a-01c0-5608-8ed4-a20433fddd10","frontmatter":{"title":"Using async/await in ExpressJS middlewares","date":"15 February, 2018","layout":"post"},"fields":{"slug":"/blog/2018/03/15/express-async-middleware/","readingTime":{"text":"5 min read"}},"excerpt":"If you are not living in a cave for the past year you'll probably know the  keywords are one of the most interesting additions on ES7. It merges the benefits of a sequential syntax with the power of asynchronous programming. In this post we will cover how we must use correctly async functions as express middleware. async/await  is an extremely useful notation. There are plenty of good articles explaining them and how to use it and, IMO, there is an extremely useful visual explanation in 7 secs…"}},{"node":{"id":"0e41b76b-c197-5283-a9c8-3e3bc11c7037","frontmatter":{"title":"Graceful shutdown NodeJS HTTP server when using PM2","date":"27 August, 2017","layout":"post"},"fields":{"slug":"/blog/2017/08/27/graceful-shutdown-node-processes/","readingTime":{"text":"5 min read"}},"excerpt":"So you have created a NodeJS server that receives tons of requests and you are really happy but, as every piece of software, you found a bug or add a new feature to it. It is clear you will need to shutdown your NodeJS process/es and restart again so that the new code takes place. The question is: how can you do that in a graceful way that allows continue serving incoming requests? More on this series: Understanding the NodeJS cluster module Using cluster module with HTTP servers Using PM2 to…"}},{"node":{"id":"f753d3d2-597f-5ab9-b208-de8891dc2df3","frontmatter":{"title":"Using PM2 to manage NodeJS cluster","date":"20 August, 2017","layout":"post"},"fields":{"slug":"/blog/2017/08/20/using-pm2-to-manage-cluster/","readingTime":{"text":"5 min read"}},"excerpt":"The cluster module allows us to create worker processes to improve our NodeJS applications performance. This is specially important in web applications, where a master process receives all the requests and load balances them among the worker processes. But all this power comes with the cost that must be the application who manages all the complexity associated with process managements: what happens if a worker process exists unexpectedly, how exit gracefully the worker processes, what if you…"}},{"node":{"id":"fc28cbe1-f3ce-52c6-a40c-b80fac9aba35","frontmatter":{"title":"Using cluster module with HTTP servers","date":"18 August, 2017","layout":"post"},"fields":{"slug":"/blog/2017/08/18/using-cluster-module-with-http-servers/","readingTime":{"text":"5 min read"}},"excerpt":"The cluster module allow us improve performance of our application in multicore CPU systems. This is specially important no matter if working on an APIs or an, i.e. ExpressJS based, web servers, what we desire is to take advantage of all the CPUs on each machine our NodeJS application is running. The cluster module allow us to load balance the incoming request among a set of worker processes and, because of this, improving the throughput of our application. In the previous post Understanding the…"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":6,"skip":0,"numPages":17,"currentPage":1}}}