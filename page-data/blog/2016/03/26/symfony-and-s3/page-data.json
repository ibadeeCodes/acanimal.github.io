{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2016/03/26/symfony-and-s3","webpackCompilationHash":"dfd26dbe3cbb7e082b48","result":{"data":{"markdownRemark":{"html":"<p>Paraphrasing the movie title <em>Sex, lies and videotape</em>, this post is related on how I configured my symfony project to work with images (including thumbnail generation) and store all them on Amazon S3 service. There are are libraries and bundles to work with images and also others to work with S3, but the combination of all them can be a tricky experience with not much documentation out there. In addition, there is also one more challenge to achieve and, that is, while developing I want to store images locally (in a directory) but when deployed I want to use S3 storage.</p>\n<p>Currently I'm working on a project where users can upload photos. The application allows users to create collections, drag and drop images, order them and finally upload to the server. In addition, the user can explore his/her collections, browse images and download collections in a single ZIP file. All this having in mind:</p>\n<ul>\n<li>While developing locally we want to store images in the local server folder. In staging or production environment we want to use S3. Original images must remain private, while the thumbnails must be public to be included in the application web pages.</li>\n<li>We need to generate thumbnails with different sizes. When a user access to a collection a list of small thumbnails are shown. When user clicks an image a medium thumbnail is presented. When user downloads a collection the ZIP file must include the original images.</li>\n</ul>\n<p>So, in summary, we need to deal with image upload, thumbnail generation and S3 service.</p>\n<h2>Uploading images</h2>\n<p>For image uploading we have used the <a href=\"https://github.com/dustin10/VichUploaderBundle\">VichUploaderBundle</a>. Uploading images isn't a secret but can involve some extra tasks. The <a href=\"https://github.com/dustin10/VichUploaderBundle\">VichUploaderBundle</a> helps working with file uploads that are attached to ORM entities, that is, it is responsible to move the images to some configured place and attach it to your entity.</p>\n<p>In addition, we want to store images in folders classified by user and collection, something like <code class=\"language-text\">user_X/collection_Y/some_image</code>, where <code class=\"language-text\">X</code> and <code class=\"language-text\">Y</code> are identifiers. A nice feature <a href=\"https://github.com/dustin10/VichUploaderBundle\">VichUploaderBundle</a> offers is the possibility to attach the so called <em>directory namer</em> or <em>file namer</em> that determines the final name for the upload file. This way when a file is uploaded, given the current user and the selected collection, we determine dynamically the target folder where the bundle must store the image.</p>\n<p>Note the ORM entity only has the image file name. The path to the file is computed through the specified directory and/or file namers. For this reason, the bundle also includes the methods require to get the absolute path to a file given the file name stored within the entity.</p>\n<h2>Generating thumbnails</h2>\n<p>To generate thumbnails we have used the <a href=\"https://github.com/liip/LiipImagineBundle\">LiipImagineBundle</a> bundle. With it, when you reference an image within your templates you don't get the original image but a new one obtained applying some filters. Next line shows how to include an image in your twig template obtained after applying a <code class=\"language-text\">my_thumbnail</code> configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{{ '/relative/path/to/image.jpg' | imagine_filter('my_thumbnail') }}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>The good thing is <a href=\"https://github.com/liip/LiipImagineBundle\">LiipImagineBundle</a> generates the thumbnails when images are first time accessed and stores them in a <em>cache</em> folder for next calls.</p>\n<h2>Abstracting the file system</h2>\n<p>The issue is we want to upload images and generate thumbnails into a local folder at development time and to S3 when running in staging or production.</p>\n<p>Hopefully for us there is the <a href=\"https://github.com/KnpLabs/Gaufrette\">Gaufrette</a> bundle, which is an abstract filesystem. It offers a common interface to read/write to different filesystem and a bunch of implementations to work against the local filesystem, an FTP server, Amazon S3 service, ... and many more.</p>\n<h2>Putting it all together</h2>\n<p>Arrived here, the main question is how to configure the three bundles to work together, in summary:</p>\n<ul>\n<li>We want to abstract the filesystem to work locally while developing and with S3 in production.</li>\n<li>We need to upload images.</li>\n<li>We need to generate thumbnails for uploaded images and store them in a cache folder to be later server.</li>\n</ul>\n<p>We have divided the configuration between the <code class=\"language-text\">config.yml</code> file and the <code class=\"language-text\">config_prod.yml</code>. The first contains the configuration for the previous three bundles ready to work locally. The second overrides some propertires to work in production, using S3.</p>\n<p>The first point is to configure the <a href=\"https://github.com/KnpLabs/Gaufrette\">Gaufrette</a> bundle to abstract our filesystem. Next is the configuration in the <code class=\"language-text\">config.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token comment\"># config.yml</span>\n<span class=\"token key atrule\">knp_gaufrette</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">stream_wrapper</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~</span>\n\n    <span class=\"token key atrule\">adapters</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Local adapter</span>\n        <span class=\"token key atrule\">local</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">local</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">directory</span><span class=\"token punctuation\">:</span> %kernel.root_dir%/../web/uploads\n\n    <span class=\"token key atrule\">filesystems</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">custom_uploads_fs</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">adapter</span><span class=\"token punctuation\">:</span>    local</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Compare with parameters we override in the <code class=\"language-text\">config_prod.yml</code>. <em>Note for production you need to define an AWS-S3 service which I do not include here.</em></p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token comment\"># config_prod.yml</span>\n<span class=\"token key atrule\">knp_gaufrette</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">adapters</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># S3 adapter</span>\n        <span class=\"token key atrule\">s3</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">aws_s3</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">service_id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'komik.aws_s3.client'</span>\n                <span class=\"token key atrule\">bucket_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'komik-staging'</span>\n\n    <span class=\"token key atrule\">filesystems</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">custom_uploads_fs</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">adapter</span><span class=\"token punctuation\">:</span>    s3</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We define a <code class=\"language-text\">custom_uploads_fs</code> filesystem which by default uses a <code class=\"language-text\">local</code> adapter and in production uses an <code class=\"language-text\">aws_s3</code> one.</p>\n<p>Next step is to configure the <a href=\"https://github.com/dustin10/VichUploaderBundle\">VichUploaderBundle</a> bundle. Hopefully it is designed to integrate with Gaufrette so it is easy to specify how to upload files through gaufrette. Next is the configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token comment\"># config.yml</span>\n<span class=\"token key atrule\">vich_uploader</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">db_driver</span><span class=\"token punctuation\">:</span> orm\n    <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span>   gaufrette\n\n    <span class=\"token key atrule\">mappings</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">my_images</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">uri_prefix</span><span class=\"token punctuation\">:</span>         <span class=\"token null important\">~</span>\n            <span class=\"token key atrule\">upload_destination</span><span class=\"token punctuation\">:</span> custom_uploads_fs\n            <span class=\"token key atrule\">directory_namer</span><span class=\"token punctuation\">:</span>    app.vich_uploader.custom.directory.namer\n            <span class=\"token key atrule\">namer</span><span class=\"token punctuation\">:</span>              vich_uploader.namer_uniqid\n            <span class=\"token key atrule\">inject_on_load</span><span class=\"token punctuation\">:</span>     <span class=\"token boolean important\">false</span>\n            <span class=\"token key atrule\">delete_on_update</span><span class=\"token punctuation\">:</span>   <span class=\"token boolean important\">true</span>\n            <span class=\"token key atrule\">delete_on_remove</span><span class=\"token punctuation\">:</span>   <span class=\"token boolean important\">true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As you can see we are specifying we want to use gaufrette with <code class=\"language-text\">storage: gaufrette</code> and the upload destination is the previous defined gaufrette filesystem <code class=\"language-text\">custom_uploads_fs</code>. This means all images will be uploaded through the Gaufrette filesystem to that destination. Note, within the target filesystem, the final folder and file name are determined by a custom directory namer we have implemented (<code class=\"language-text\">app.vich_uploader.custom.directory.namer</code> which adds the user ID to the path) and the file namer <code class=\"language-text\">vich_uploader.namer_uniqid</code> offered by Gaufrette, which assigns a unique name to each file.</p>\n<p>Finally, we need to configure the <a href=\"https://github.com/liip/LiipImagineBundle\">LiipImagineBundle</a> bundle. Next is the configuration used for local development. We need to specify the cache folder where to generate the thumbnails in adition to our filter, that will generate with size <code class=\"language-text\">350x450</code> and half quality:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token comment\"># config.yml</span>\n<span class=\"token key atrule\">liip_imagine</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">resolvers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Cache generated files locally</span>\n        <span class=\"token key atrule\">local_fs</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">web_path</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">web_root</span><span class=\"token punctuation\">:</span> %kernel.root_dir%/../web\n                <span class=\"token key atrule\">cache_prefix</span><span class=\"token punctuation\">:</span> uploads/_cache\n\n    <span class=\"token key atrule\">loaders</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">stream_uploads</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">stream</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">wrapper</span><span class=\"token punctuation\">:</span> gaufrette<span class=\"token punctuation\">:</span>//custom_uploads_fs/\n\n    <span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span> local_fs\n\n    <span class=\"token key atrule\">data_loader</span><span class=\"token punctuation\">:</span> stream_uploads\n\n    <span class=\"token key atrule\">filter_sets</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">my_thumb</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">quality</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>\n            <span class=\"token key atrule\">filters</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">thumbnail</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">350</span><span class=\"token punctuation\">,</span> <span class=\"token number\">450</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> inset <span class=\"token punctuation\">}</span>\n                <span class=\"token key atrule\">strip</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Main properties to configure are the <code class=\"language-text\">data_loader</code>and the <code class=\"language-text\">cache</code>. The first one uses the stream <code class=\"language-text\">stream_uploads</code> that uses gaufrette filesystem. The second uses the resolver <code class=\"language-text\">local_fs</code> that we have configured to use the local folder <code class=\"language-text\">uploads/_cache</code>.</p>\n<p>For production, configuration changes slightly. Here we override the resolver to generate cache files through the resolver <code class=\"language-text\">s3_fs</code> which points to S3 bucket:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token comment\"># config_prod.yml</span>\n<span class=\"token key atrule\">liip_imagine</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">resolvers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Cache generated files on S3</span>\n        <span class=\"token key atrule\">s3_fs</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">aws_s3</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">client_config</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> %your_amazon_s3.key%\n                    <span class=\"token key atrule\">secret</span><span class=\"token punctuation\">:</span> %your_amazon_s3.secret%\n                    <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> %your_amazon_s3.region%\n                <span class=\"token key atrule\">bucket</span><span class=\"token punctuation\">:</span> %your_bucket_name%\n\n    <span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span> s3_fs</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>Conclusions</h1>\n<p><a href=\"https://github.com/dustin10/VichUploaderBundle\">VichUploaderBundle</a>, <a href=\"https://github.com/liip/LiipImagineBundle\">LiipImagineBundle</a> and <a href=\"https://github.com/KnpLabs/Gaufrette\">Gaufrette</a> are three great Symfony2 bundles. The configuration to make work all them can by tricky so hope this post can help others.</p>\n<p>While <a href=\"https://github.com/dustin10/VichUploaderBundle\">VichUploaderBundle</a> is designed to work with <a href=\"https://github.com/KnpLabs/Gaufrette\">Gaufrette</a>, and its configuration is almost trivial, <a href=\"https://github.com/liip/LiipImagineBundle\">LiipImagineBundle</a> is not and requires some extra tasks. For <a href=\"https://github.com/liip/LiipImagineBundle\">LiipImagineBundle</a> we need to configure its main components, which are the <em>cache</em> and the <code class=\"language-text\">data_loader</code>.</p>","excerpt":"Paraphrasing the movie title Sex, lies and videotape, this post is related on how I configured my symfony project to work with images (including thumbnail generation) and store all them on Amazon S3 service. There are are libraries and bundles to work with images and also others to work with S3, but the combination of all them can be a tricky experience with not much documentation out there. In addition, there is also one more challenge to achieve and, that is, while developing I want to store images locally (in a directory) but when deployed I want to use S3 storage. Currently I'm working on a project where users can upload photos. The application allows users to create collections, drag and drop images, order them and finally upload to the server. In addition, the user can explore his/her collections, browse images and download collections in a single ZIP file. All this having in mind: While developing locally we want to store images in the local server folder. In staging or production environment we want to use S3. Original images must remain private, while the thumbnails must be public to be included in the application web pages. We need to generate thumbnails with different sizes. When a user access to a collection a list of small thumbnails are shown. When user clicks an image a medium thumbnail is presented. When user downloads a collection the ZIP file must include the original images. So, in summary, we need to deal with image upload, thumbnail generation and S3 service. Uploading images For image uploading we have used the VichUploaderBundle. Uploading images isn't a secret but can involve some extra tasks. The VichUploaderBundle helps working with file uploads that are attached to ORM entities, that is, it is responsible to move the images to some configured place and attach it to your entity. In addition, we want to store images in folders classified by user and collection, something like , where  and  are identifiers. A nice feature VichUploaderBundle offers is the possibility to attach the so called directory namer or file namer that determines the final name for the upload file. This way when a file is uploaded, given the current user and the selected collection, we determine dynamically the target folder where the bundle must store the image. Note the ORM entity only has the image file name. The path to the file is computed through the specified directory and/or file namers. For this reason, the bundle also includes the methods require to get the absolute path to a file given the file name stored within the entity. Generating thumbnails To generate thumbnails we have used the LiipImagineBundle bundle. With it, when you reference an image within your templates you don't get the original image but a new one obtained applying some filters. Next line shows how to include an image in your twig template obtained after applying a  configuration: The good thing is LiipImagineBundle generates the thumbnails when images are first time accessed and stores them in a cache folder for next calls. Abstracting the file system The issue is we want to upload images and generate thumbnails into a local folder at development time and to S3 when running in staging or production. Hopefully for us there is the Gaufrette bundle, which is an abstract filesystem. It offers a common interface to read/write to different filesystem and a bunch of implementations to work against the local filesystem, an FTP server, Amazon S3 service, ... and many more. Putting it all together Arrived here, the main question is how to configure the three bundles to work together, in summary: We want to abstract the filesystem to work locally while developing and with S3 in production. We need to upload images. We need to generate thumbnails for uploaded images and store them in a cache folder to be later server. We have divided the configuration between the  file and the . The first contains the configuration for the previous three bundles ready to work locally. The second overrides some propertires to work in production, using S3. The first point is to configure the Gaufrette bundle to abstract our filesystem. Next is the configuration in the : Compare with parameters we override in the . Note for production you need to define an AWS-S3 service which I do not include here. We define a  filesystem which by default uses a  adapter and in production uses an  one. Next step is to configure the VichUploaderBundle bundle. Hopefully it is designed to integrate with Gaufrette so it is easy to specify how to upload files through gaufrette. Next is the configuration: As you can see we are specifying we want to use gaufrette with  and the upload destination is the previous defined gaufrette filesystem . This means all images will be uploaded through the Gaufrette filesystem to that destination. Note, within the target filesystem, the final folder and file name are determined by a custom directory namer we have implemented ( which adds the user ID to the path) and the file namer  offered by Gaufrette, which assigns a unique name to each file. Finally, we need to configure the LiipImagineBundle bundle. Next is the configuration used for local development. We need to specify the cache folder where to generate the thumbnails in adition to our filter, that will generate with size  and half quality: Main properties to configure are the and the . The first one uses the stream  that uses gaufrette filesystem. The second uses the resolver  that we have configured to use the local folder . For production, configuration changes slightly. Here we override the resolver to generate cache files through the resolver  which points to S3 bucket: Conclusions VichUploaderBundle, LiipImagineBundle and Gaufrette are three great Symfony2 bundles. The configuration to make work all them can by tricky so hope this post can help others. While VichUploaderBundle is designed to work with Gaufrette, and its configuration is almost trivial, LiipImagineBundle is not and requires some extra tasks. For LiipImagineBundle we need to configure its main components, which are the cache and the .","frontmatter":{"date":"25 March, 2016","title":"Symfony, images and S3"},"fields":{"slug":"/blog/2016/03/26/symfony-and-s3","readingTime":{"text":"6 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2016/03/26/symfony-and-s3"}}}